/*
 * generated by Xtext 2.25.0
 */
package mde.iot.ucm4iot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Ucm4iotGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class IoTUseCaseModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.IoTUseCaseModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Action cIoTUseCaseModelAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cKeywordStandardModeParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cGroup_0.eContents().get(4);
		private final Assignment cStandardModeAssignment_0_4_0 = (Assignment)cAlternatives_0_4.eContents().get(0);
		private final Keyword cStandardModeOnKeyword_0_4_0_0 = (Keyword)cStandardModeAssignment_0_4_0.eContents().get(0);
		private final Keyword cOffKeyword_0_4_1 = (Keyword)cAlternatives_0_4.eContents().get(1);
		private final Assignment cUseCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUseCasesUseCaseParserRuleCall_1_0 = (RuleCall)cUseCasesAssignment_1.eContents().get(0);
		
		///* Root Grammar */
		//IoTUseCaseModel:
		//    ({IoTUseCaseModel} '!' KeywordStandardMode ':' (standardMode?='on' | 'off') )?
		//    (useCases+=UseCase)*;
		@Override public ParserRule getRule() { return rule; }
		
		//({IoTUseCaseModel} '!' KeywordStandardMode ':' (standardMode?='on' | 'off') )?
		//(useCases+=UseCase)*
		public Group getGroup() { return cGroup; }
		
		//({IoTUseCaseModel} '!' KeywordStandardMode ':' (standardMode?='on' | 'off') )?
		public Group getGroup_0() { return cGroup_0; }
		
		//{IoTUseCaseModel}
		public Action getIoTUseCaseModelAction_0_0() { return cIoTUseCaseModelAction_0_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }
		
		//KeywordStandardMode
		public RuleCall getKeywordStandardModeParserRuleCall_0_2() { return cKeywordStandardModeParserRuleCall_0_2; }
		
		//':'
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }
		
		//(standardMode?='on' | 'off')
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }
		
		//standardMode?='on'
		public Assignment getStandardModeAssignment_0_4_0() { return cStandardModeAssignment_0_4_0; }
		
		//'on'
		public Keyword getStandardModeOnKeyword_0_4_0_0() { return cStandardModeOnKeyword_0_4_0_0; }
		
		//'off'
		public Keyword getOffKeyword_0_4_1() { return cOffKeyword_0_4_1; }
		
		//(useCases+=UseCase)*
		public Assignment getUseCasesAssignment_1() { return cUseCasesAssignment_1; }
		
		//UseCase
		public RuleCall getUseCasesUseCaseParserRuleCall_1_0() { return cUseCasesUseCaseParserRuleCall_1_0; }
	}
	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cExceptionalUseCaseParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cHandlerUseCaseParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cKeywordMainSuccessScenarioParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMainMainScenarioParserRuleCall_3_0 = (RuleCall)cMainAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cKeywordExtensionsParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExtensionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExtensionsExtensionsParserRuleCall_4_2_0 = (RuleCall)cExtensionsAssignment_4_2.eContents().get(0);
		
		///* Use Case Grammars */
		//UseCase:
		//    (ExceptionalUseCase | HandlerUseCase)
		//    KeywordMainSuccessScenario ':' main=MainScenario
		//    (KeywordExtensions ':' extensions=Extensions)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExceptionalUseCase | HandlerUseCase)
		//KeywordMainSuccessScenario ':' main=MainScenario
		//(KeywordExtensions ':' extensions=Extensions)?
		public Group getGroup() { return cGroup; }
		
		//(ExceptionalUseCase | HandlerUseCase)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ExceptionalUseCase
		public RuleCall getExceptionalUseCaseParserRuleCall_0_0() { return cExceptionalUseCaseParserRuleCall_0_0; }
		
		//HandlerUseCase
		public RuleCall getHandlerUseCaseParserRuleCall_0_1() { return cHandlerUseCaseParserRuleCall_0_1; }
		
		//KeywordMainSuccessScenario
		public RuleCall getKeywordMainSuccessScenarioParserRuleCall_1() { return cKeywordMainSuccessScenarioParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//main=MainScenario
		public Assignment getMainAssignment_3() { return cMainAssignment_3; }
		
		//MainScenario
		public RuleCall getMainMainScenarioParserRuleCall_3_0() { return cMainMainScenarioParserRuleCall_3_0; }
		
		//(KeywordExtensions ':' extensions=Extensions)?
		public Group getGroup_4() { return cGroup_4; }
		
		//KeywordExtensions
		public RuleCall getKeywordExtensionsParserRuleCall_4_0() { return cKeywordExtensionsParserRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//extensions=Extensions
		public Assignment getExtensionsAssignment_4_2() { return cExtensionsAssignment_4_2; }
		
		//Extensions
		public RuleCall getExtensionsExtensionsParserRuleCall_4_2_0() { return cExtensionsExtensionsParserRuleCall_4_2_0; }
	}
	public class ExceptionalUseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.ExceptionalUseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeywordExceptionalUseCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cKeywordScopeParserRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cScopeAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cScopeIDTerminalRuleCall_3_0_2_0 = (RuleCall)cScopeAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cKeywordIntentionParserRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cIntentAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cIntentSTRINGTerminalRuleCall_3_1_2_0 = (RuleCall)cIntentAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cKeywordLevelParserRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cLevelAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cLevelLevelEnumRuleCall_3_2_2_0 = (RuleCall)cLevelAssignment_3_2_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final RuleCall cKeywordMultiplicityParserRuleCall_3_3_0 = (RuleCall)cGroup_3_3.eContents().get(0);
		private final Keyword cColonKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cMultiplicitySTRINGTerminalRuleCall_3_3_2_0 = (RuleCall)cMultiplicityAssignment_3_3_2.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final RuleCall cKeywordPreconditionParserRuleCall_3_4_0 = (RuleCall)cGroup_3_4.eContents().get(0);
		private final Keyword cColonKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cPreconditionAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cPreconditionSTRINGTerminalRuleCall_3_4_2_0 = (RuleCall)cPreconditionAssignment_3_4_2.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final RuleCall cKeywordPostconditionParserRuleCall_3_5_0 = (RuleCall)cGroup_3_5.eContents().get(0);
		private final Keyword cColonKeyword_3_5_1 = (Keyword)cGroup_3_5.eContents().get(1);
		private final Assignment cPostconditionAssignment_3_5_2 = (Assignment)cGroup_3_5.eContents().get(2);
		private final RuleCall cPostconditionSTRINGTerminalRuleCall_3_5_2_0 = (RuleCall)cPostconditionAssignment_3_5_2.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final RuleCall cKeywordPrimaryActorParserRuleCall_3_6_0 = (RuleCall)cGroup_3_6.eContents().get(0);
		private final Keyword cColonKeyword_3_6_1 = (Keyword)cGroup_3_6.eContents().get(1);
		private final Alternatives cAlternatives_3_6_2 = (Alternatives)cGroup_3_6.eContents().get(2);
		private final Alternatives cAlternatives_3_6_2_0 = (Alternatives)cAlternatives_3_6_2.eContents().get(0);
		private final RuleCall cNotApplicableParserRuleCall_3_6_2_0_0 = (RuleCall)cAlternatives_3_6_2_0.eContents().get(0);
		private final RuleCall cNoneParserRuleCall_3_6_2_0_1 = (RuleCall)cAlternatives_3_6_2_0.eContents().get(1);
		private final Assignment cPrimaryActorAssignment_3_6_2_1 = (Assignment)cAlternatives_3_6_2.eContents().get(1);
		private final RuleCall cPrimaryActorPrimaryActorParserRuleCall_3_6_2_1_0 = (RuleCall)cPrimaryActorAssignment_3_6_2_1.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final RuleCall cKeywordSecondaryActorParserRuleCall_3_7_0 = (RuleCall)cGroup_3_7.eContents().get(0);
		private final Keyword cColonKeyword_3_7_1 = (Keyword)cGroup_3_7.eContents().get(1);
		private final Alternatives cAlternatives_3_7_2 = (Alternatives)cGroup_3_7.eContents().get(2);
		private final Alternatives cAlternatives_3_7_2_0 = (Alternatives)cAlternatives_3_7_2.eContents().get(0);
		private final RuleCall cNotApplicableParserRuleCall_3_7_2_0_0 = (RuleCall)cAlternatives_3_7_2_0.eContents().get(0);
		private final RuleCall cNoneParserRuleCall_3_7_2_0_1 = (RuleCall)cAlternatives_3_7_2_0.eContents().get(1);
		private final Group cGroup_3_7_2_1 = (Group)cAlternatives_3_7_2.eContents().get(1);
		private final Assignment cSecondaryActorsAssignment_3_7_2_1_0 = (Assignment)cGroup_3_7_2_1.eContents().get(0);
		private final RuleCall cSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_0_0 = (RuleCall)cSecondaryActorsAssignment_3_7_2_1_0.eContents().get(0);
		private final Group cGroup_3_7_2_1_1 = (Group)cGroup_3_7_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_7_2_1_1_0 = (Keyword)cGroup_3_7_2_1_1.eContents().get(0);
		private final Assignment cSecondaryActorsAssignment_3_7_2_1_1_1 = (Assignment)cGroup_3_7_2_1_1.eContents().get(1);
		private final RuleCall cSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_1_1_0 = (RuleCall)cSecondaryActorsAssignment_3_7_2_1_1_1.eContents().get(0);
		private final Group cGroup_3_8 = (Group)cUnorderedGroup_3.eContents().get(8);
		private final RuleCall cKeywordFacilitatorActorParserRuleCall_3_8_0 = (RuleCall)cGroup_3_8.eContents().get(0);
		private final Keyword cColonKeyword_3_8_1 = (Keyword)cGroup_3_8.eContents().get(1);
		private final Alternatives cAlternatives_3_8_2 = (Alternatives)cGroup_3_8.eContents().get(2);
		private final Alternatives cAlternatives_3_8_2_0 = (Alternatives)cAlternatives_3_8_2.eContents().get(0);
		private final RuleCall cNotApplicableParserRuleCall_3_8_2_0_0 = (RuleCall)cAlternatives_3_8_2_0.eContents().get(0);
		private final RuleCall cNoneParserRuleCall_3_8_2_0_1 = (RuleCall)cAlternatives_3_8_2_0.eContents().get(1);
		private final Group cGroup_3_8_2_1 = (Group)cAlternatives_3_8_2.eContents().get(1);
		private final Assignment cFacilitatorActorsAssignment_3_8_2_1_0 = (Assignment)cGroup_3_8_2_1.eContents().get(0);
		private final RuleCall cFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_0_0 = (RuleCall)cFacilitatorActorsAssignment_3_8_2_1_0.eContents().get(0);
		private final Group cGroup_3_8_2_1_1 = (Group)cGroup_3_8_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_8_2_1_1_0 = (Keyword)cGroup_3_8_2_1_1.eContents().get(0);
		private final Assignment cFacilitatorActorsAssignment_3_8_2_1_1_1 = (Assignment)cGroup_3_8_2_1_1.eContents().get(1);
		private final RuleCall cFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_1_1_0 = (RuleCall)cFacilitatorActorsAssignment_3_8_2_1_1_1.eContents().get(0);
		
		//ExceptionalUseCase:
		//    KeywordExceptionalUseCase ':' name=ID
		//    ((KeywordScope        ':'  scope=ID)              &
		//    (KeywordIntention     ':'  intent=STRING)         &
		//    (KeywordLevel         ':'  level=Level)           &
		//    (KeywordMultiplicity  ':'  multiplicity=STRING) ? &
		//    (KeywordPrecondition  ':'  precondition=STRING) ? &
		//    (KeywordPostcondition ':'  postcondition=STRING)? &
		//    (KeywordPrimaryActor  ':'
		//        ((NotApplicable | None) | (primaryActor=PrimaryActor))) &
		//    (KeywordSecondaryActor ':'
		//        ((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)))? &
		//    (KeywordFacilitatorActor ':'
		//        ((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)))?);
		@Override public ParserRule getRule() { return rule; }
		
		//KeywordExceptionalUseCase ':' name=ID
		//((KeywordScope        ':'  scope=ID)              &
		//(KeywordIntention     ':'  intent=STRING)         &
		//(KeywordLevel         ':'  level=Level)           &
		//(KeywordMultiplicity  ':'  multiplicity=STRING) ? &
		//(KeywordPrecondition  ':'  precondition=STRING) ? &
		//(KeywordPostcondition ':'  postcondition=STRING)? &
		//(KeywordPrimaryActor  ':'
		//    ((NotApplicable | None) | (primaryActor=PrimaryActor))) &
		//(KeywordSecondaryActor ':'
		//    ((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)))? &
		//(KeywordFacilitatorActor ':'
		//    ((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)))?)
		public Group getGroup() { return cGroup; }
		
		//KeywordExceptionalUseCase
		public RuleCall getKeywordExceptionalUseCaseParserRuleCall_0() { return cKeywordExceptionalUseCaseParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//((KeywordScope        ':'  scope=ID)              &
		//(KeywordIntention     ':'  intent=STRING)         &
		//(KeywordLevel         ':'  level=Level)           &
		//(KeywordMultiplicity  ':'  multiplicity=STRING) ? &
		//(KeywordPrecondition  ':'  precondition=STRING) ? &
		//(KeywordPostcondition ':'  postcondition=STRING)? &
		//(KeywordPrimaryActor  ':'
		//    ((NotApplicable | None) | (primaryActor=PrimaryActor))) &
		//(KeywordSecondaryActor ':'
		//    ((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)))? &
		//(KeywordFacilitatorActor ':'
		//    ((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)))?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//(KeywordScope        ':'  scope=ID)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//KeywordScope
		public RuleCall getKeywordScopeParserRuleCall_3_0_0() { return cKeywordScopeParserRuleCall_3_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_1() { return cColonKeyword_3_0_1; }
		
		//scope=ID
		public Assignment getScopeAssignment_3_0_2() { return cScopeAssignment_3_0_2; }
		
		//ID
		public RuleCall getScopeIDTerminalRuleCall_3_0_2_0() { return cScopeIDTerminalRuleCall_3_0_2_0; }
		
		//(KeywordIntention     ':'  intent=STRING)
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//KeywordIntention
		public RuleCall getKeywordIntentionParserRuleCall_3_1_0() { return cKeywordIntentionParserRuleCall_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_1() { return cColonKeyword_3_1_1; }
		
		//intent=STRING
		public Assignment getIntentAssignment_3_1_2() { return cIntentAssignment_3_1_2; }
		
		//STRING
		public RuleCall getIntentSTRINGTerminalRuleCall_3_1_2_0() { return cIntentSTRINGTerminalRuleCall_3_1_2_0; }
		
		//(KeywordLevel         ':'  level=Level)
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//KeywordLevel
		public RuleCall getKeywordLevelParserRuleCall_3_2_0() { return cKeywordLevelParserRuleCall_3_2_0; }
		
		//':'
		public Keyword getColonKeyword_3_2_1() { return cColonKeyword_3_2_1; }
		
		//level=Level
		public Assignment getLevelAssignment_3_2_2() { return cLevelAssignment_3_2_2; }
		
		//Level
		public RuleCall getLevelLevelEnumRuleCall_3_2_2_0() { return cLevelLevelEnumRuleCall_3_2_2_0; }
		
		//(KeywordMultiplicity  ':'  multiplicity=STRING) ?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//KeywordMultiplicity
		public RuleCall getKeywordMultiplicityParserRuleCall_3_3_0() { return cKeywordMultiplicityParserRuleCall_3_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_3_1() { return cColonKeyword_3_3_1; }
		
		//multiplicity=STRING
		public Assignment getMultiplicityAssignment_3_3_2() { return cMultiplicityAssignment_3_3_2; }
		
		//STRING
		public RuleCall getMultiplicitySTRINGTerminalRuleCall_3_3_2_0() { return cMultiplicitySTRINGTerminalRuleCall_3_3_2_0; }
		
		//(KeywordPrecondition  ':'  precondition=STRING) ?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//KeywordPrecondition
		public RuleCall getKeywordPreconditionParserRuleCall_3_4_0() { return cKeywordPreconditionParserRuleCall_3_4_0; }
		
		//':'
		public Keyword getColonKeyword_3_4_1() { return cColonKeyword_3_4_1; }
		
		//precondition=STRING
		public Assignment getPreconditionAssignment_3_4_2() { return cPreconditionAssignment_3_4_2; }
		
		//STRING
		public RuleCall getPreconditionSTRINGTerminalRuleCall_3_4_2_0() { return cPreconditionSTRINGTerminalRuleCall_3_4_2_0; }
		
		//(KeywordPostcondition ':'  postcondition=STRING)?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//KeywordPostcondition
		public RuleCall getKeywordPostconditionParserRuleCall_3_5_0() { return cKeywordPostconditionParserRuleCall_3_5_0; }
		
		//':'
		public Keyword getColonKeyword_3_5_1() { return cColonKeyword_3_5_1; }
		
		//postcondition=STRING
		public Assignment getPostconditionAssignment_3_5_2() { return cPostconditionAssignment_3_5_2; }
		
		//STRING
		public RuleCall getPostconditionSTRINGTerminalRuleCall_3_5_2_0() { return cPostconditionSTRINGTerminalRuleCall_3_5_2_0; }
		
		//(KeywordPrimaryActor  ':'
		//    ((NotApplicable | None) | (primaryActor=PrimaryActor)))
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//KeywordPrimaryActor
		public RuleCall getKeywordPrimaryActorParserRuleCall_3_6_0() { return cKeywordPrimaryActorParserRuleCall_3_6_0; }
		
		//':'
		public Keyword getColonKeyword_3_6_1() { return cColonKeyword_3_6_1; }
		
		//((NotApplicable | None) | (primaryActor=PrimaryActor))
		public Alternatives getAlternatives_3_6_2() { return cAlternatives_3_6_2; }
		
		//(NotApplicable | None)
		public Alternatives getAlternatives_3_6_2_0() { return cAlternatives_3_6_2_0; }
		
		//NotApplicable
		public RuleCall getNotApplicableParserRuleCall_3_6_2_0_0() { return cNotApplicableParserRuleCall_3_6_2_0_0; }
		
		//None
		public RuleCall getNoneParserRuleCall_3_6_2_0_1() { return cNoneParserRuleCall_3_6_2_0_1; }
		
		//(primaryActor=PrimaryActor)
		public Assignment getPrimaryActorAssignment_3_6_2_1() { return cPrimaryActorAssignment_3_6_2_1; }
		
		//PrimaryActor
		public RuleCall getPrimaryActorPrimaryActorParserRuleCall_3_6_2_1_0() { return cPrimaryActorPrimaryActorParserRuleCall_3_6_2_1_0; }
		
		//(KeywordSecondaryActor ':'
		//    ((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)))?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//KeywordSecondaryActor
		public RuleCall getKeywordSecondaryActorParserRuleCall_3_7_0() { return cKeywordSecondaryActorParserRuleCall_3_7_0; }
		
		//':'
		public Keyword getColonKeyword_3_7_1() { return cColonKeyword_3_7_1; }
		
		//((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*))
		public Alternatives getAlternatives_3_7_2() { return cAlternatives_3_7_2; }
		
		//(NotApplicable | None)
		public Alternatives getAlternatives_3_7_2_0() { return cAlternatives_3_7_2_0; }
		
		//NotApplicable
		public RuleCall getNotApplicableParserRuleCall_3_7_2_0_0() { return cNotApplicableParserRuleCall_3_7_2_0_0; }
		
		//None
		public RuleCall getNoneParserRuleCall_3_7_2_0_1() { return cNoneParserRuleCall_3_7_2_0_1; }
		
		//(secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)
		public Group getGroup_3_7_2_1() { return cGroup_3_7_2_1; }
		
		//secondaryActors+=SecondaryActor
		public Assignment getSecondaryActorsAssignment_3_7_2_1_0() { return cSecondaryActorsAssignment_3_7_2_1_0; }
		
		//SecondaryActor
		public RuleCall getSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_0_0() { return cSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_0_0; }
		
		//(',' secondaryActors+=SecondaryActor)*
		public Group getGroup_3_7_2_1_1() { return cGroup_3_7_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_7_2_1_1_0() { return cCommaKeyword_3_7_2_1_1_0; }
		
		//secondaryActors+=SecondaryActor
		public Assignment getSecondaryActorsAssignment_3_7_2_1_1_1() { return cSecondaryActorsAssignment_3_7_2_1_1_1; }
		
		//SecondaryActor
		public RuleCall getSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_1_1_0() { return cSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_1_1_0; }
		
		//(KeywordFacilitatorActor ':'
		//    ((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)))?
		public Group getGroup_3_8() { return cGroup_3_8; }
		
		//KeywordFacilitatorActor
		public RuleCall getKeywordFacilitatorActorParserRuleCall_3_8_0() { return cKeywordFacilitatorActorParserRuleCall_3_8_0; }
		
		//':'
		public Keyword getColonKeyword_3_8_1() { return cColonKeyword_3_8_1; }
		
		//((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*))
		public Alternatives getAlternatives_3_8_2() { return cAlternatives_3_8_2; }
		
		//(NotApplicable | None)
		public Alternatives getAlternatives_3_8_2_0() { return cAlternatives_3_8_2_0; }
		
		//NotApplicable
		public RuleCall getNotApplicableParserRuleCall_3_8_2_0_0() { return cNotApplicableParserRuleCall_3_8_2_0_0; }
		
		//None
		public RuleCall getNoneParserRuleCall_3_8_2_0_1() { return cNoneParserRuleCall_3_8_2_0_1; }
		
		//(facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)
		public Group getGroup_3_8_2_1() { return cGroup_3_8_2_1; }
		
		//facilitatorActors+=SecondaryActor
		public Assignment getFacilitatorActorsAssignment_3_8_2_1_0() { return cFacilitatorActorsAssignment_3_8_2_1_0; }
		
		//SecondaryActor
		public RuleCall getFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_0_0() { return cFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_0_0; }
		
		//(',' facilitatorActors+=SecondaryActor)*
		public Group getGroup_3_8_2_1_1() { return cGroup_3_8_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_8_2_1_1_0() { return cCommaKeyword_3_8_2_1_1_0; }
		
		//facilitatorActors+=SecondaryActor
		public Assignment getFacilitatorActorsAssignment_3_8_2_1_1_1() { return cFacilitatorActorsAssignment_3_8_2_1_1_1; }
		
		//SecondaryActor
		public RuleCall getFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_1_1_0() { return cFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_1_1_0; }
	}
	public class HandlerUseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.HandlerUseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeywordHandlerUseCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cKeywordScopeParserRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cScopeAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cScopeIDTerminalRuleCall_3_0_2_0 = (RuleCall)cScopeAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cKeywordIntentionParserRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cIntentAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cIntentSTRINGTerminalRuleCall_3_1_2_0 = (RuleCall)cIntentAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cKeywordLevelParserRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cLevelAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cLevelLevelEnumRuleCall_3_2_2_0 = (RuleCall)cLevelAssignment_3_2_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final RuleCall cKeywordMultiplicityParserRuleCall_3_3_0 = (RuleCall)cGroup_3_3.eContents().get(0);
		private final Keyword cColonKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cMultiplicitySTRINGTerminalRuleCall_3_3_2_0 = (RuleCall)cMultiplicityAssignment_3_3_2.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final RuleCall cKeywordPreconditionParserRuleCall_3_4_0 = (RuleCall)cGroup_3_4.eContents().get(0);
		private final Keyword cColonKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cPreconditionAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cPreconditionSTRINGTerminalRuleCall_3_4_2_0 = (RuleCall)cPreconditionAssignment_3_4_2.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final RuleCall cKeywordPostconditionParserRuleCall_3_5_0 = (RuleCall)cGroup_3_5.eContents().get(0);
		private final Keyword cColonKeyword_3_5_1 = (Keyword)cGroup_3_5.eContents().get(1);
		private final Assignment cPostconditionAssignment_3_5_2 = (Assignment)cGroup_3_5.eContents().get(2);
		private final RuleCall cPostconditionSTRINGTerminalRuleCall_3_5_2_0 = (RuleCall)cPostconditionAssignment_3_5_2.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final RuleCall cKeywordPrimaryActorParserRuleCall_3_6_0 = (RuleCall)cGroup_3_6.eContents().get(0);
		private final Keyword cColonKeyword_3_6_1 = (Keyword)cGroup_3_6.eContents().get(1);
		private final Alternatives cAlternatives_3_6_2 = (Alternatives)cGroup_3_6.eContents().get(2);
		private final Alternatives cAlternatives_3_6_2_0 = (Alternatives)cAlternatives_3_6_2.eContents().get(0);
		private final RuleCall cNotApplicableParserRuleCall_3_6_2_0_0 = (RuleCall)cAlternatives_3_6_2_0.eContents().get(0);
		private final RuleCall cNoneParserRuleCall_3_6_2_0_1 = (RuleCall)cAlternatives_3_6_2_0.eContents().get(1);
		private final Assignment cPrimaryActorAssignment_3_6_2_1 = (Assignment)cAlternatives_3_6_2.eContents().get(1);
		private final RuleCall cPrimaryActorPrimaryActorParserRuleCall_3_6_2_1_0 = (RuleCall)cPrimaryActorAssignment_3_6_2_1.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final RuleCall cKeywordSecondaryActorParserRuleCall_3_7_0 = (RuleCall)cGroup_3_7.eContents().get(0);
		private final Keyword cColonKeyword_3_7_1 = (Keyword)cGroup_3_7.eContents().get(1);
		private final Alternatives cAlternatives_3_7_2 = (Alternatives)cGroup_3_7.eContents().get(2);
		private final Alternatives cAlternatives_3_7_2_0 = (Alternatives)cAlternatives_3_7_2.eContents().get(0);
		private final RuleCall cNotApplicableParserRuleCall_3_7_2_0_0 = (RuleCall)cAlternatives_3_7_2_0.eContents().get(0);
		private final RuleCall cNoneParserRuleCall_3_7_2_0_1 = (RuleCall)cAlternatives_3_7_2_0.eContents().get(1);
		private final Group cGroup_3_7_2_1 = (Group)cAlternatives_3_7_2.eContents().get(1);
		private final Assignment cSecondaryActorsAssignment_3_7_2_1_0 = (Assignment)cGroup_3_7_2_1.eContents().get(0);
		private final RuleCall cSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_0_0 = (RuleCall)cSecondaryActorsAssignment_3_7_2_1_0.eContents().get(0);
		private final Group cGroup_3_7_2_1_1 = (Group)cGroup_3_7_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_7_2_1_1_0 = (Keyword)cGroup_3_7_2_1_1.eContents().get(0);
		private final Assignment cSecondaryActorsAssignment_3_7_2_1_1_1 = (Assignment)cGroup_3_7_2_1_1.eContents().get(1);
		private final RuleCall cSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_1_1_0 = (RuleCall)cSecondaryActorsAssignment_3_7_2_1_1_1.eContents().get(0);
		private final Group cGroup_3_8 = (Group)cUnorderedGroup_3.eContents().get(8);
		private final RuleCall cKeywordFacilitatorActorParserRuleCall_3_8_0 = (RuleCall)cGroup_3_8.eContents().get(0);
		private final Keyword cColonKeyword_3_8_1 = (Keyword)cGroup_3_8.eContents().get(1);
		private final Alternatives cAlternatives_3_8_2 = (Alternatives)cGroup_3_8.eContents().get(2);
		private final Alternatives cAlternatives_3_8_2_0 = (Alternatives)cAlternatives_3_8_2.eContents().get(0);
		private final RuleCall cNotApplicableParserRuleCall_3_8_2_0_0 = (RuleCall)cAlternatives_3_8_2_0.eContents().get(0);
		private final RuleCall cNoneParserRuleCall_3_8_2_0_1 = (RuleCall)cAlternatives_3_8_2_0.eContents().get(1);
		private final Group cGroup_3_8_2_1 = (Group)cAlternatives_3_8_2.eContents().get(1);
		private final Assignment cFacilitatorActorsAssignment_3_8_2_1_0 = (Assignment)cGroup_3_8_2_1.eContents().get(0);
		private final RuleCall cFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_0_0 = (RuleCall)cFacilitatorActorsAssignment_3_8_2_1_0.eContents().get(0);
		private final Group cGroup_3_8_2_1_1 = (Group)cGroup_3_8_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_8_2_1_1_0 = (Keyword)cGroup_3_8_2_1_1.eContents().get(0);
		private final Assignment cFacilitatorActorsAssignment_3_8_2_1_1_1 = (Assignment)cGroup_3_8_2_1_1.eContents().get(1);
		private final RuleCall cFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_1_1_0 = (RuleCall)cFacilitatorActorsAssignment_3_8_2_1_1_1.eContents().get(0);
		private final Group cGroup_3_9 = (Group)cUnorderedGroup_3.eContents().get(9);
		private final RuleCall cKeywordHandlerClassParserRuleCall_3_9_0 = (RuleCall)cGroup_3_9.eContents().get(0);
		private final Keyword cColonKeyword_3_9_1 = (Keyword)cGroup_3_9.eContents().get(1);
		private final Alternatives cAlternatives_3_9_2 = (Alternatives)cGroup_3_9.eContents().get(2);
		private final Alternatives cAlternatives_3_9_2_0 = (Alternatives)cAlternatives_3_9_2.eContents().get(0);
		private final RuleCall cNotApplicableParserRuleCall_3_9_2_0_0 = (RuleCall)cAlternatives_3_9_2_0.eContents().get(0);
		private final RuleCall cNoneParserRuleCall_3_9_2_0_1 = (RuleCall)cAlternatives_3_9_2_0.eContents().get(1);
		private final Assignment cHandlerClassAssignment_3_9_2_1 = (Assignment)cAlternatives_3_9_2.eContents().get(1);
		private final RuleCall cHandlerClassIDTerminalRuleCall_3_9_2_1_0 = (RuleCall)cHandlerClassAssignment_3_9_2_1.eContents().get(0);
		private final Group cGroup_3_10 = (Group)cUnorderedGroup_3.eContents().get(10);
		private final RuleCall cKeywordContextExceptionParserRuleCall_3_10_0 = (RuleCall)cGroup_3_10.eContents().get(0);
		private final Keyword cColonKeyword_3_10_1 = (Keyword)cGroup_3_10.eContents().get(1);
		private final Assignment cContextExceptionsAssignment_3_10_2 = (Assignment)cGroup_3_10.eContents().get(2);
		private final RuleCall cContextExceptionsContextExceptionMappingParserRuleCall_3_10_2_0 = (RuleCall)cContextExceptionsAssignment_3_10_2.eContents().get(0);
		private final Group cGroup_3_10_3 = (Group)cGroup_3_10.eContents().get(3);
		private final Keyword cCommaKeyword_3_10_3_0 = (Keyword)cGroup_3_10_3.eContents().get(0);
		private final Assignment cContextExceptionsAssignment_3_10_3_1 = (Assignment)cGroup_3_10_3.eContents().get(1);
		private final RuleCall cContextExceptionsContextExceptionMappingParserRuleCall_3_10_3_1_0 = (RuleCall)cContextExceptionsAssignment_3_10_3_1.eContents().get(0);
		
		//HandlerUseCase:
		//    KeywordHandlerUseCase ':'  name=ID
		//    ((KeywordScope        ':'  scope=ID)              &
		//    (KeywordIntention     ':'  intent=STRING)         &
		//    (KeywordLevel         ':'  level=Level)           &
		//    (KeywordMultiplicity  ':'  multiplicity=STRING) ? &
		//    (KeywordPrecondition  ':'  precondition=STRING) ? &
		//    (KeywordPostcondition ':'  postcondition=STRING)? &
		//    (KeywordPrimaryActor  ':'
		//        ((NotApplicable | None) | (primaryActor=PrimaryActor))) &
		//    (KeywordSecondaryActor ':'
		//        ((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)))? &
		//    (KeywordFacilitatorActor ':'
		//        ((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)))? &
		//    (KeywordHandlerClass ':'
		//        ((NotApplicable | None) | handlerClass=ID))? &
		//    (KeywordContextException ':'
		//        contextExceptions+=ContextExceptionMapping (',' contextExceptions+=ContextExceptionMapping)*));
		@Override public ParserRule getRule() { return rule; }
		
		//KeywordHandlerUseCase ':'  name=ID
		//((KeywordScope        ':'  scope=ID)              &
		//(KeywordIntention     ':'  intent=STRING)         &
		//(KeywordLevel         ':'  level=Level)           &
		//(KeywordMultiplicity  ':'  multiplicity=STRING) ? &
		//(KeywordPrecondition  ':'  precondition=STRING) ? &
		//(KeywordPostcondition ':'  postcondition=STRING)? &
		//(KeywordPrimaryActor  ':'
		//    ((NotApplicable | None) | (primaryActor=PrimaryActor))) &
		//(KeywordSecondaryActor ':'
		//    ((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)))? &
		//(KeywordFacilitatorActor ':'
		//    ((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)))? &
		//(KeywordHandlerClass ':'
		//    ((NotApplicable | None) | handlerClass=ID))? &
		//(KeywordContextException ':'
		//    contextExceptions+=ContextExceptionMapping (',' contextExceptions+=ContextExceptionMapping)*))
		public Group getGroup() { return cGroup; }
		
		//KeywordHandlerUseCase
		public RuleCall getKeywordHandlerUseCaseParserRuleCall_0() { return cKeywordHandlerUseCaseParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//((KeywordScope        ':'  scope=ID)              &
		//(KeywordIntention     ':'  intent=STRING)         &
		//(KeywordLevel         ':'  level=Level)           &
		//(KeywordMultiplicity  ':'  multiplicity=STRING) ? &
		//(KeywordPrecondition  ':'  precondition=STRING) ? &
		//(KeywordPostcondition ':'  postcondition=STRING)? &
		//(KeywordPrimaryActor  ':'
		//    ((NotApplicable | None) | (primaryActor=PrimaryActor))) &
		//(KeywordSecondaryActor ':'
		//    ((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)))? &
		//(KeywordFacilitatorActor ':'
		//    ((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)))? &
		//(KeywordHandlerClass ':'
		//    ((NotApplicable | None) | handlerClass=ID))? &
		//(KeywordContextException ':'
		//    contextExceptions+=ContextExceptionMapping (',' contextExceptions+=ContextExceptionMapping)*))
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//(KeywordScope        ':'  scope=ID)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//KeywordScope
		public RuleCall getKeywordScopeParserRuleCall_3_0_0() { return cKeywordScopeParserRuleCall_3_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_1() { return cColonKeyword_3_0_1; }
		
		//scope=ID
		public Assignment getScopeAssignment_3_0_2() { return cScopeAssignment_3_0_2; }
		
		//ID
		public RuleCall getScopeIDTerminalRuleCall_3_0_2_0() { return cScopeIDTerminalRuleCall_3_0_2_0; }
		
		//(KeywordIntention     ':'  intent=STRING)
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//KeywordIntention
		public RuleCall getKeywordIntentionParserRuleCall_3_1_0() { return cKeywordIntentionParserRuleCall_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_1() { return cColonKeyword_3_1_1; }
		
		//intent=STRING
		public Assignment getIntentAssignment_3_1_2() { return cIntentAssignment_3_1_2; }
		
		//STRING
		public RuleCall getIntentSTRINGTerminalRuleCall_3_1_2_0() { return cIntentSTRINGTerminalRuleCall_3_1_2_0; }
		
		//(KeywordLevel         ':'  level=Level)
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//KeywordLevel
		public RuleCall getKeywordLevelParserRuleCall_3_2_0() { return cKeywordLevelParserRuleCall_3_2_0; }
		
		//':'
		public Keyword getColonKeyword_3_2_1() { return cColonKeyword_3_2_1; }
		
		//level=Level
		public Assignment getLevelAssignment_3_2_2() { return cLevelAssignment_3_2_2; }
		
		//Level
		public RuleCall getLevelLevelEnumRuleCall_3_2_2_0() { return cLevelLevelEnumRuleCall_3_2_2_0; }
		
		//(KeywordMultiplicity  ':'  multiplicity=STRING) ?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//KeywordMultiplicity
		public RuleCall getKeywordMultiplicityParserRuleCall_3_3_0() { return cKeywordMultiplicityParserRuleCall_3_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_3_1() { return cColonKeyword_3_3_1; }
		
		//multiplicity=STRING
		public Assignment getMultiplicityAssignment_3_3_2() { return cMultiplicityAssignment_3_3_2; }
		
		//STRING
		public RuleCall getMultiplicitySTRINGTerminalRuleCall_3_3_2_0() { return cMultiplicitySTRINGTerminalRuleCall_3_3_2_0; }
		
		//(KeywordPrecondition  ':'  precondition=STRING) ?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//KeywordPrecondition
		public RuleCall getKeywordPreconditionParserRuleCall_3_4_0() { return cKeywordPreconditionParserRuleCall_3_4_0; }
		
		//':'
		public Keyword getColonKeyword_3_4_1() { return cColonKeyword_3_4_1; }
		
		//precondition=STRING
		public Assignment getPreconditionAssignment_3_4_2() { return cPreconditionAssignment_3_4_2; }
		
		//STRING
		public RuleCall getPreconditionSTRINGTerminalRuleCall_3_4_2_0() { return cPreconditionSTRINGTerminalRuleCall_3_4_2_0; }
		
		//(KeywordPostcondition ':'  postcondition=STRING)?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//KeywordPostcondition
		public RuleCall getKeywordPostconditionParserRuleCall_3_5_0() { return cKeywordPostconditionParserRuleCall_3_5_0; }
		
		//':'
		public Keyword getColonKeyword_3_5_1() { return cColonKeyword_3_5_1; }
		
		//postcondition=STRING
		public Assignment getPostconditionAssignment_3_5_2() { return cPostconditionAssignment_3_5_2; }
		
		//STRING
		public RuleCall getPostconditionSTRINGTerminalRuleCall_3_5_2_0() { return cPostconditionSTRINGTerminalRuleCall_3_5_2_0; }
		
		//(KeywordPrimaryActor  ':'
		//    ((NotApplicable | None) | (primaryActor=PrimaryActor)))
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//KeywordPrimaryActor
		public RuleCall getKeywordPrimaryActorParserRuleCall_3_6_0() { return cKeywordPrimaryActorParserRuleCall_3_6_0; }
		
		//':'
		public Keyword getColonKeyword_3_6_1() { return cColonKeyword_3_6_1; }
		
		//((NotApplicable | None) | (primaryActor=PrimaryActor))
		public Alternatives getAlternatives_3_6_2() { return cAlternatives_3_6_2; }
		
		//(NotApplicable | None)
		public Alternatives getAlternatives_3_6_2_0() { return cAlternatives_3_6_2_0; }
		
		//NotApplicable
		public RuleCall getNotApplicableParserRuleCall_3_6_2_0_0() { return cNotApplicableParserRuleCall_3_6_2_0_0; }
		
		//None
		public RuleCall getNoneParserRuleCall_3_6_2_0_1() { return cNoneParserRuleCall_3_6_2_0_1; }
		
		//(primaryActor=PrimaryActor)
		public Assignment getPrimaryActorAssignment_3_6_2_1() { return cPrimaryActorAssignment_3_6_2_1; }
		
		//PrimaryActor
		public RuleCall getPrimaryActorPrimaryActorParserRuleCall_3_6_2_1_0() { return cPrimaryActorPrimaryActorParserRuleCall_3_6_2_1_0; }
		
		//(KeywordSecondaryActor ':'
		//    ((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)))?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//KeywordSecondaryActor
		public RuleCall getKeywordSecondaryActorParserRuleCall_3_7_0() { return cKeywordSecondaryActorParserRuleCall_3_7_0; }
		
		//':'
		public Keyword getColonKeyword_3_7_1() { return cColonKeyword_3_7_1; }
		
		//((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*))
		public Alternatives getAlternatives_3_7_2() { return cAlternatives_3_7_2; }
		
		//(NotApplicable | None)
		public Alternatives getAlternatives_3_7_2_0() { return cAlternatives_3_7_2_0; }
		
		//NotApplicable
		public RuleCall getNotApplicableParserRuleCall_3_7_2_0_0() { return cNotApplicableParserRuleCall_3_7_2_0_0; }
		
		//None
		public RuleCall getNoneParserRuleCall_3_7_2_0_1() { return cNoneParserRuleCall_3_7_2_0_1; }
		
		//(secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)
		public Group getGroup_3_7_2_1() { return cGroup_3_7_2_1; }
		
		//secondaryActors+=SecondaryActor
		public Assignment getSecondaryActorsAssignment_3_7_2_1_0() { return cSecondaryActorsAssignment_3_7_2_1_0; }
		
		//SecondaryActor
		public RuleCall getSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_0_0() { return cSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_0_0; }
		
		//(',' secondaryActors+=SecondaryActor)*
		public Group getGroup_3_7_2_1_1() { return cGroup_3_7_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_7_2_1_1_0() { return cCommaKeyword_3_7_2_1_1_0; }
		
		//secondaryActors+=SecondaryActor
		public Assignment getSecondaryActorsAssignment_3_7_2_1_1_1() { return cSecondaryActorsAssignment_3_7_2_1_1_1; }
		
		//SecondaryActor
		public RuleCall getSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_1_1_0() { return cSecondaryActorsSecondaryActorParserRuleCall_3_7_2_1_1_1_0; }
		
		//(KeywordFacilitatorActor ':'
		//    ((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)))?
		public Group getGroup_3_8() { return cGroup_3_8; }
		
		//KeywordFacilitatorActor
		public RuleCall getKeywordFacilitatorActorParserRuleCall_3_8_0() { return cKeywordFacilitatorActorParserRuleCall_3_8_0; }
		
		//':'
		public Keyword getColonKeyword_3_8_1() { return cColonKeyword_3_8_1; }
		
		//((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*))
		public Alternatives getAlternatives_3_8_2() { return cAlternatives_3_8_2; }
		
		//(NotApplicable | None)
		public Alternatives getAlternatives_3_8_2_0() { return cAlternatives_3_8_2_0; }
		
		//NotApplicable
		public RuleCall getNotApplicableParserRuleCall_3_8_2_0_0() { return cNotApplicableParserRuleCall_3_8_2_0_0; }
		
		//None
		public RuleCall getNoneParserRuleCall_3_8_2_0_1() { return cNoneParserRuleCall_3_8_2_0_1; }
		
		//(facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)
		public Group getGroup_3_8_2_1() { return cGroup_3_8_2_1; }
		
		//facilitatorActors+=SecondaryActor
		public Assignment getFacilitatorActorsAssignment_3_8_2_1_0() { return cFacilitatorActorsAssignment_3_8_2_1_0; }
		
		//SecondaryActor
		public RuleCall getFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_0_0() { return cFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_0_0; }
		
		//(',' facilitatorActors+=SecondaryActor)*
		public Group getGroup_3_8_2_1_1() { return cGroup_3_8_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_8_2_1_1_0() { return cCommaKeyword_3_8_2_1_1_0; }
		
		//facilitatorActors+=SecondaryActor
		public Assignment getFacilitatorActorsAssignment_3_8_2_1_1_1() { return cFacilitatorActorsAssignment_3_8_2_1_1_1; }
		
		//SecondaryActor
		public RuleCall getFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_1_1_0() { return cFacilitatorActorsSecondaryActorParserRuleCall_3_8_2_1_1_1_0; }
		
		//(KeywordHandlerClass ':'
		//    ((NotApplicable | None) | handlerClass=ID))?
		public Group getGroup_3_9() { return cGroup_3_9; }
		
		//KeywordHandlerClass
		public RuleCall getKeywordHandlerClassParserRuleCall_3_9_0() { return cKeywordHandlerClassParserRuleCall_3_9_0; }
		
		//':'
		public Keyword getColonKeyword_3_9_1() { return cColonKeyword_3_9_1; }
		
		//((NotApplicable | None) | handlerClass=ID)
		public Alternatives getAlternatives_3_9_2() { return cAlternatives_3_9_2; }
		
		//(NotApplicable | None)
		public Alternatives getAlternatives_3_9_2_0() { return cAlternatives_3_9_2_0; }
		
		//NotApplicable
		public RuleCall getNotApplicableParserRuleCall_3_9_2_0_0() { return cNotApplicableParserRuleCall_3_9_2_0_0; }
		
		//None
		public RuleCall getNoneParserRuleCall_3_9_2_0_1() { return cNoneParserRuleCall_3_9_2_0_1; }
		
		//handlerClass=ID
		public Assignment getHandlerClassAssignment_3_9_2_1() { return cHandlerClassAssignment_3_9_2_1; }
		
		//ID
		public RuleCall getHandlerClassIDTerminalRuleCall_3_9_2_1_0() { return cHandlerClassIDTerminalRuleCall_3_9_2_1_0; }
		
		//(KeywordContextException ':'
		//    contextExceptions+=ContextExceptionMapping (',' contextExceptions+=ContextExceptionMapping)*)
		public Group getGroup_3_10() { return cGroup_3_10; }
		
		//KeywordContextException
		public RuleCall getKeywordContextExceptionParserRuleCall_3_10_0() { return cKeywordContextExceptionParserRuleCall_3_10_0; }
		
		//':'
		public Keyword getColonKeyword_3_10_1() { return cColonKeyword_3_10_1; }
		
		//contextExceptions+=ContextExceptionMapping
		public Assignment getContextExceptionsAssignment_3_10_2() { return cContextExceptionsAssignment_3_10_2; }
		
		//ContextExceptionMapping
		public RuleCall getContextExceptionsContextExceptionMappingParserRuleCall_3_10_2_0() { return cContextExceptionsContextExceptionMappingParserRuleCall_3_10_2_0; }
		
		//(',' contextExceptions+=ContextExceptionMapping)*
		public Group getGroup_3_10_3() { return cGroup_3_10_3; }
		
		//','
		public Keyword getCommaKeyword_3_10_3_0() { return cCommaKeyword_3_10_3_0; }
		
		//contextExceptions+=ContextExceptionMapping
		public Assignment getContextExceptionsAssignment_3_10_3_1() { return cContextExceptionsAssignment_3_10_3_1; }
		
		//ContextExceptionMapping
		public RuleCall getContextExceptionsContextExceptionMappingParserRuleCall_3_10_3_1_0() { return cContextExceptionsContextExceptionMappingParserRuleCall_3_10_3_1_0; }
	}
	public class MainScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.MainScenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStepsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStepsStepParserRuleCall_0_0 = (RuleCall)cStepsAssignment_0.eContents().get(0);
		private final Assignment cOutcomeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutcomeOutcomeEndsParserRuleCall_1_0 = (RuleCall)cOutcomeAssignment_1.eContents().get(0);
		
		///* Main Success Scenario Grammars */
		//MainScenario:
		//    (steps+=Step)+ outcome=OutcomeEnds;
		@Override public ParserRule getRule() { return rule; }
		
		//(steps+=Step)+ outcome=OutcomeEnds
		public Group getGroup() { return cGroup; }
		
		//(steps+=Step)+
		public Assignment getStepsAssignment_0() { return cStepsAssignment_0; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_0_0() { return cStepsStepParserRuleCall_0_0; }
		
		//outcome=OutcomeEnds
		public Assignment getOutcomeAssignment_1() { return cOutcomeAssignment_1; }
		
		//OutcomeEnds
		public RuleCall getOutcomeOutcomeEndsParserRuleCall_1_0() { return cOutcomeOutcomeEndsParserRuleCall_1_0; }
	}
	public class ExtensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.Extensions");
		private final Assignment cBlocksAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlocksExtensionBlockParserRuleCall_0 = (RuleCall)cBlocksAssignment.eContents().get(0);
		
		///* Extension Grammars */
		//Extensions:
		//    (blocks+=ExtensionBlock)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(blocks+=ExtensionBlock)+
		public Assignment getBlocksAssignment() { return cBlocksAssignment; }
		
		//ExtensionBlock
		public RuleCall getBlocksExtensionBlockParserRuleCall_0() { return cBlocksExtensionBlockParserRuleCall_0; }
	}
	public class ExtensionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.ExtensionBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlternateBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExceptionalBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExtensionBlock:
		//    (AlternateBlock | ExceptionalBlock);
		@Override public ParserRule getRule() { return rule; }
		
		//(AlternateBlock | ExceptionalBlock)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AlternateBlock
		public RuleCall getAlternateBlockParserRuleCall_0() { return cAlternateBlockParserRuleCall_0; }
		
		//ExceptionalBlock
		public RuleCall getExceptionalBlockParserRuleCall_1() { return cExceptionalBlockParserRuleCall_1; }
	}
	public class AlternateBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.AlternateBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeywordAlternateBlockParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRefStepAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cRefStepStepCrossReference_2_0_0 = (CrossReference)cRefStepAssignment_2_0.eContents().get(0);
		private final RuleCall cRefStepStepStepNumberParserRuleCall_2_0_0_1 = (RuleCall)cRefStepStepCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cHasRangedRefAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cHasRangedRefLeftParenthesisKeyword_2_1_0_0 = (Keyword)cHasRangedRefAssignment_2_1_0.eContents().get(0);
		private final Assignment cRefStepAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cRefStepStepCrossReference_2_1_1_0 = (CrossReference)cRefStepAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRefStepStepStepNumberParserRuleCall_2_1_1_0_1 = (RuleCall)cRefStepStepCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cEndRefStepAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final CrossReference cEndRefStepStepCrossReference_2_1_3_0 = (CrossReference)cEndRefStepAssignment_2_1_3.eContents().get(0);
		private final RuleCall cEndRefStepStepStepNumberParserRuleCall_2_1_3_0_1 = (RuleCall)cEndRefStepStepCrossReference_2_1_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStepsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepsStepParserRuleCall_4_0 = (RuleCall)cStepsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cOutcomeAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cOutcomeOutcomeParserRuleCall_5_0_0 = (RuleCall)cOutcomeAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final RuleCall cKeywordChildListBeginsParserRuleCall_5_1_0 = (RuleCall)cGroup_5_1.eContents().get(0);
		private final Keyword cColonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cBlocksAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cBlocksExtensionBlockParserRuleCall_5_1_2_0 = (RuleCall)cBlocksAssignment_5_1_2.eContents().get(0);
		private final RuleCall cKeywordChildListEndsParserRuleCall_5_1_3 = (RuleCall)cGroup_5_1.eContents().get(3);
		
		//AlternateBlock:
		//    KeywordAlternateBlock 'for' (refStep=[Step|StepNumber] | (hasRangedRef?='(' refStep=[Step|StepNumber] '-' endRefStep=[Step|StepNumber] ')')) ':'
		//    (steps+=Step)+
		//    (outcome=Outcome | (KeywordChildListBegins ':' (blocks+=ExtensionBlock)+ KeywordChildListEnds));
		@Override public ParserRule getRule() { return rule; }
		
		//KeywordAlternateBlock 'for' (refStep=[Step|StepNumber] | (hasRangedRef?='(' refStep=[Step|StepNumber] '-' endRefStep=[Step|StepNumber] ')')) ':'
		//(steps+=Step)+
		//(outcome=Outcome | (KeywordChildListBegins ':' (blocks+=ExtensionBlock)+ KeywordChildListEnds))
		public Group getGroup() { return cGroup; }
		
		//KeywordAlternateBlock
		public RuleCall getKeywordAlternateBlockParserRuleCall_0() { return cKeywordAlternateBlockParserRuleCall_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//(refStep=[Step|StepNumber] | (hasRangedRef?='(' refStep=[Step|StepNumber] '-' endRefStep=[Step|StepNumber] ')'))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//refStep=[Step|StepNumber]
		public Assignment getRefStepAssignment_2_0() { return cRefStepAssignment_2_0; }
		
		//[Step|StepNumber]
		public CrossReference getRefStepStepCrossReference_2_0_0() { return cRefStepStepCrossReference_2_0_0; }
		
		//StepNumber
		public RuleCall getRefStepStepStepNumberParserRuleCall_2_0_0_1() { return cRefStepStepStepNumberParserRuleCall_2_0_0_1; }
		
		//(hasRangedRef?='(' refStep=[Step|StepNumber] '-' endRefStep=[Step|StepNumber] ')')
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//hasRangedRef?='('
		public Assignment getHasRangedRefAssignment_2_1_0() { return cHasRangedRefAssignment_2_1_0; }
		
		//'('
		public Keyword getHasRangedRefLeftParenthesisKeyword_2_1_0_0() { return cHasRangedRefLeftParenthesisKeyword_2_1_0_0; }
		
		//refStep=[Step|StepNumber]
		public Assignment getRefStepAssignment_2_1_1() { return cRefStepAssignment_2_1_1; }
		
		//[Step|StepNumber]
		public CrossReference getRefStepStepCrossReference_2_1_1_0() { return cRefStepStepCrossReference_2_1_1_0; }
		
		//StepNumber
		public RuleCall getRefStepStepStepNumberParserRuleCall_2_1_1_0_1() { return cRefStepStepStepNumberParserRuleCall_2_1_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_1_2() { return cHyphenMinusKeyword_2_1_2; }
		
		//endRefStep=[Step|StepNumber]
		public Assignment getEndRefStepAssignment_2_1_3() { return cEndRefStepAssignment_2_1_3; }
		
		//[Step|StepNumber]
		public CrossReference getEndRefStepStepCrossReference_2_1_3_0() { return cEndRefStepStepCrossReference_2_1_3_0; }
		
		//StepNumber
		public RuleCall getEndRefStepStepStepNumberParserRuleCall_2_1_3_0_1() { return cEndRefStepStepStepNumberParserRuleCall_2_1_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_4() { return cRightParenthesisKeyword_2_1_4; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(steps+=Step)+
		public Assignment getStepsAssignment_4() { return cStepsAssignment_4; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_4_0() { return cStepsStepParserRuleCall_4_0; }
		
		//(outcome=Outcome | (KeywordChildListBegins ':' (blocks+=ExtensionBlock)+ KeywordChildListEnds))
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//outcome=Outcome
		public Assignment getOutcomeAssignment_5_0() { return cOutcomeAssignment_5_0; }
		
		//Outcome
		public RuleCall getOutcomeOutcomeParserRuleCall_5_0_0() { return cOutcomeOutcomeParserRuleCall_5_0_0; }
		
		//(KeywordChildListBegins ':' (blocks+=ExtensionBlock)+ KeywordChildListEnds)
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//KeywordChildListBegins
		public RuleCall getKeywordChildListBeginsParserRuleCall_5_1_0() { return cKeywordChildListBeginsParserRuleCall_5_1_0; }
		
		//':'
		public Keyword getColonKeyword_5_1_1() { return cColonKeyword_5_1_1; }
		
		//(blocks+=ExtensionBlock)+
		public Assignment getBlocksAssignment_5_1_2() { return cBlocksAssignment_5_1_2; }
		
		//ExtensionBlock
		public RuleCall getBlocksExtensionBlockParserRuleCall_5_1_2_0() { return cBlocksExtensionBlockParserRuleCall_5_1_2_0; }
		
		//KeywordChildListEnds
		public RuleCall getKeywordChildListEndsParserRuleCall_5_1_3() { return cKeywordChildListEndsParserRuleCall_5_1_3; }
	}
	public class ExceptionalBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.ExceptionalBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeywordExceptionalBlockParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRefStepAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cRefStepStepCrossReference_2_0_0 = (CrossReference)cRefStepAssignment_2_0.eContents().get(0);
		private final RuleCall cRefStepStepStepNumberParserRuleCall_2_0_0_1 = (RuleCall)cRefStepStepCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cHasRangedRefAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cHasRangedRefLeftParenthesisKeyword_2_1_0_0 = (Keyword)cHasRangedRefAssignment_2_1_0.eContents().get(0);
		private final Assignment cRefStepAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cRefStepStepCrossReference_2_1_1_0 = (CrossReference)cRefStepAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRefStepStepStepNumberParserRuleCall_2_1_1_0_1 = (RuleCall)cRefStepStepCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cEndRefStepAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final CrossReference cEndRefStepStepCrossReference_2_1_3_0 = (CrossReference)cEndRefStepAssignment_2_1_3.eContents().get(0);
		private final RuleCall cEndRefStepStepStepNumberParserRuleCall_2_1_3_0_1 = (RuleCall)cEndRefStepStepCrossReference_2_1_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStepsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepsStepParserRuleCall_4_0 = (RuleCall)cStepsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cOutcomeAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cOutcomeOutcomeParserRuleCall_5_0_0 = (RuleCall)cOutcomeAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final RuleCall cKeywordChildListBeginsParserRuleCall_5_1_0 = (RuleCall)cGroup_5_1.eContents().get(0);
		private final Keyword cColonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cBlocksAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cBlocksExtensionBlockParserRuleCall_5_1_2_0 = (RuleCall)cBlocksAssignment_5_1_2.eContents().get(0);
		private final RuleCall cKeywordChildListEndsParserRuleCall_5_1_3 = (RuleCall)cGroup_5_1.eContents().get(3);
		
		//ExceptionalBlock:
		//    KeywordExceptionalBlock 'for' (refStep=[Step|StepNumber] | (hasRangedRef?='(' refStep=[Step|StepNumber] '-' endRefStep=[Step|StepNumber] ')')) ':'
		//    (steps+=Step)+
		//    (outcome=Outcome | (KeywordChildListBegins ':' (blocks+=ExtensionBlock)+ KeywordChildListEnds));
		@Override public ParserRule getRule() { return rule; }
		
		//KeywordExceptionalBlock 'for' (refStep=[Step|StepNumber] | (hasRangedRef?='(' refStep=[Step|StepNumber] '-' endRefStep=[Step|StepNumber] ')')) ':'
		//(steps+=Step)+
		//(outcome=Outcome | (KeywordChildListBegins ':' (blocks+=ExtensionBlock)+ KeywordChildListEnds))
		public Group getGroup() { return cGroup; }
		
		//KeywordExceptionalBlock
		public RuleCall getKeywordExceptionalBlockParserRuleCall_0() { return cKeywordExceptionalBlockParserRuleCall_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//(refStep=[Step|StepNumber] | (hasRangedRef?='(' refStep=[Step|StepNumber] '-' endRefStep=[Step|StepNumber] ')'))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//refStep=[Step|StepNumber]
		public Assignment getRefStepAssignment_2_0() { return cRefStepAssignment_2_0; }
		
		//[Step|StepNumber]
		public CrossReference getRefStepStepCrossReference_2_0_0() { return cRefStepStepCrossReference_2_0_0; }
		
		//StepNumber
		public RuleCall getRefStepStepStepNumberParserRuleCall_2_0_0_1() { return cRefStepStepStepNumberParserRuleCall_2_0_0_1; }
		
		//(hasRangedRef?='(' refStep=[Step|StepNumber] '-' endRefStep=[Step|StepNumber] ')')
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//hasRangedRef?='('
		public Assignment getHasRangedRefAssignment_2_1_0() { return cHasRangedRefAssignment_2_1_0; }
		
		//'('
		public Keyword getHasRangedRefLeftParenthesisKeyword_2_1_0_0() { return cHasRangedRefLeftParenthesisKeyword_2_1_0_0; }
		
		//refStep=[Step|StepNumber]
		public Assignment getRefStepAssignment_2_1_1() { return cRefStepAssignment_2_1_1; }
		
		//[Step|StepNumber]
		public CrossReference getRefStepStepCrossReference_2_1_1_0() { return cRefStepStepCrossReference_2_1_1_0; }
		
		//StepNumber
		public RuleCall getRefStepStepStepNumberParserRuleCall_2_1_1_0_1() { return cRefStepStepStepNumberParserRuleCall_2_1_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_1_2() { return cHyphenMinusKeyword_2_1_2; }
		
		//endRefStep=[Step|StepNumber]
		public Assignment getEndRefStepAssignment_2_1_3() { return cEndRefStepAssignment_2_1_3; }
		
		//[Step|StepNumber]
		public CrossReference getEndRefStepStepCrossReference_2_1_3_0() { return cEndRefStepStepCrossReference_2_1_3_0; }
		
		//StepNumber
		public RuleCall getEndRefStepStepStepNumberParserRuleCall_2_1_3_0_1() { return cEndRefStepStepStepNumberParserRuleCall_2_1_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_4() { return cRightParenthesisKeyword_2_1_4; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(steps+=Step)+
		public Assignment getStepsAssignment_4() { return cStepsAssignment_4; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_4_0() { return cStepsStepParserRuleCall_4_0; }
		
		//(outcome=Outcome | (KeywordChildListBegins ':' (blocks+=ExtensionBlock)+ KeywordChildListEnds))
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//outcome=Outcome
		public Assignment getOutcomeAssignment_5_0() { return cOutcomeAssignment_5_0; }
		
		//Outcome
		public RuleCall getOutcomeOutcomeParserRuleCall_5_0_0() { return cOutcomeOutcomeParserRuleCall_5_0_0; }
		
		//(KeywordChildListBegins ':' (blocks+=ExtensionBlock)+ KeywordChildListEnds)
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//KeywordChildListBegins
		public RuleCall getKeywordChildListBeginsParserRuleCall_5_1_0() { return cKeywordChildListBeginsParserRuleCall_5_1_0; }
		
		//':'
		public Keyword getColonKeyword_5_1_1() { return cColonKeyword_5_1_1; }
		
		//(blocks+=ExtensionBlock)+
		public Assignment getBlocksAssignment_5_1_2() { return cBlocksAssignment_5_1_2; }
		
		//ExtensionBlock
		public RuleCall getBlocksExtensionBlockParserRuleCall_5_1_2_0() { return cBlocksExtensionBlockParserRuleCall_5_1_2_0; }
		
		//KeywordChildListEnds
		public RuleCall getKeywordChildListEndsParserRuleCall_5_1_3() { return cKeywordChildListEndsParserRuleCall_5_1_3; }
	}
	public class OutcomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.Outcome");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOutcomeEndsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutcomeContinuesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* Outcome Grammars */
		//Outcome: (OutcomeEnds | OutcomeContinues);
		@Override public ParserRule getRule() { return rule; }
		
		//(OutcomeEnds | OutcomeContinues)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OutcomeEnds
		public RuleCall getOutcomeEndsParserRuleCall_0() { return cOutcomeEndsParserRuleCall_0; }
		
		//OutcomeContinues
		public RuleCall getOutcomeContinuesParserRuleCall_1() { return cOutcomeContinuesParserRuleCall_1; }
	}
	public class OutcomeEndsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.OutcomeEnds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeywordOutcomeEndsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOutcomeEndingsEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//OutcomeEnds:
		//    (KeywordOutcomeEnds ':' type=OutcomeEndings);
		@Override public ParserRule getRule() { return rule; }
		
		//(KeywordOutcomeEnds ':' type=OutcomeEndings)
		public Group getGroup() { return cGroup; }
		
		//KeywordOutcomeEnds
		public RuleCall getKeywordOutcomeEndsParserRuleCall_0() { return cKeywordOutcomeEndsParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=OutcomeEndings
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//OutcomeEndings
		public RuleCall getTypeOutcomeEndingsEnumRuleCall_2_0() { return cTypeOutcomeEndingsEnumRuleCall_2_0; }
	}
	public class OutcomeContinuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.OutcomeContinues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeywordOutcomeContParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStepAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStepStepCrossReference_2_0 = (CrossReference)cStepAssignment_2.eContents().get(0);
		private final RuleCall cStepStepStepNumberParserRuleCall_2_0_1 = (RuleCall)cStepStepCrossReference_2_0.eContents().get(1);
		
		//OutcomeContinues:
		//    (KeywordOutcomeCont ':' step=[Step|StepNumber]);
		@Override public ParserRule getRule() { return rule; }
		
		//(KeywordOutcomeCont ':' step=[Step|StepNumber])
		public Group getGroup() { return cGroup; }
		
		//KeywordOutcomeCont
		public RuleCall getKeywordOutcomeContParserRuleCall_0() { return cKeywordOutcomeContParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//step=[Step|StepNumber]
		public Assignment getStepAssignment_2() { return cStepAssignment_2; }
		
		//[Step|StepNumber]
		public CrossReference getStepStepCrossReference_2_0() { return cStepStepCrossReference_2_0; }
		
		//StepNumber
		public RuleCall getStepStepStepNumberParserRuleCall_2_0_1() { return cStepStepStepNumberParserRuleCall_2_0_1; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteractionStepParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInvocationStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConditionControlStepParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///* Step Grammars */
		//// TODO: separate ConditionControlStep into ConditionStep and ControlFlowStep rules.
		//// TODO: add grouped steps.
		//// - involves adding unique grammar elements to either type of step.
		//Step: (InteractionStep | InvocationStep | ConditionControlStep);
		@Override public ParserRule getRule() { return rule; }
		
		//(InteractionStep | InvocationStep | ConditionControlStep)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InteractionStep
		public RuleCall getInteractionStepParserRuleCall_0() { return cInteractionStepParserRuleCall_0; }
		
		//InvocationStep
		public RuleCall getInvocationStepParserRuleCall_1() { return cInvocationStepParserRuleCall_1; }
		
		//ConditionControlStep
		public RuleCall getConditionControlStepParserRuleCall_2() { return cConditionControlStepParserRuleCall_2; }
	}
	public class InteractionStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.InteractionStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStepNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStepNumberStepNumberParserRuleCall_0_0 = (RuleCall)cStepNumberAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExceptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExceptionExceptionParserRuleCall_2_0 = (RuleCall)cExceptionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cDescriptionAssignment_3_0.eContents().get(0);
		private final Assignment cIgnoreDescriptionAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cIgnoreDescriptionIGNORE_STRINGTerminalRuleCall_3_1_0 = (RuleCall)cIgnoreDescriptionAssignment_3_1.eContents().get(0);
		
		//InteractionStep:
		//    stepNumber=StepNumber '.' (exception=Exception)?
		//    (description=STRING | ignoreDescription?=IGNORE_STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//stepNumber=StepNumber '.' (exception=Exception)?
		//(description=STRING | ignoreDescription?=IGNORE_STRING)
		public Group getGroup() { return cGroup; }
		
		//stepNumber=StepNumber
		public Assignment getStepNumberAssignment_0() { return cStepNumberAssignment_0; }
		
		//StepNumber
		public RuleCall getStepNumberStepNumberParserRuleCall_0_0() { return cStepNumberStepNumberParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(exception=Exception)?
		public Assignment getExceptionAssignment_2() { return cExceptionAssignment_2; }
		
		//Exception
		public RuleCall getExceptionExceptionParserRuleCall_2_0() { return cExceptionExceptionParserRuleCall_2_0; }
		
		//(description=STRING | ignoreDescription?=IGNORE_STRING)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_0() { return cDescriptionAssignment_3_0; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0_0() { return cDescriptionSTRINGTerminalRuleCall_3_0_0; }
		
		//ignoreDescription?=IGNORE_STRING
		public Assignment getIgnoreDescriptionAssignment_3_1() { return cIgnoreDescriptionAssignment_3_1; }
		
		//IGNORE_STRING
		public RuleCall getIgnoreDescriptionIGNORE_STRINGTerminalRuleCall_3_1_0() { return cIgnoreDescriptionIGNORE_STRINGTerminalRuleCall_3_1_0; }
	}
	public class InvocationStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.InvocationStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStepNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStepNumberStepNumberParserRuleCall_0_0 = (RuleCall)cStepNumberAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInvokedUseCaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInvokedUseCaseUseCaseCrossReference_3_0 = (CrossReference)cInvokedUseCaseAssignment_3.eContents().get(0);
		private final RuleCall cInvokedUseCaseUseCaseIDTerminalRuleCall_3_0_1 = (RuleCall)cInvokedUseCaseUseCaseCrossReference_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cDescriptionAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0_0 = (RuleCall)cDescriptionAssignment_5_0.eContents().get(0);
		private final Assignment cIgnoreDescriptionAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cIgnoreDescriptionIGNORE_STRINGTerminalRuleCall_5_1_0 = (RuleCall)cIgnoreDescriptionAssignment_5_1.eContents().get(0);
		
		//InvocationStep:
		//    stepNumber=StepNumber '.' '[' (invokedUseCase=[UseCase|ID]) ']'
		//    (description=STRING | ignoreDescription?=IGNORE_STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//stepNumber=StepNumber '.' '[' (invokedUseCase=[UseCase|ID]) ']'
		//(description=STRING | ignoreDescription?=IGNORE_STRING)
		public Group getGroup() { return cGroup; }
		
		//stepNumber=StepNumber
		public Assignment getStepNumberAssignment_0() { return cStepNumberAssignment_0; }
		
		//StepNumber
		public RuleCall getStepNumberStepNumberParserRuleCall_0_0() { return cStepNumberStepNumberParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(invokedUseCase=[UseCase|ID])
		public Assignment getInvokedUseCaseAssignment_3() { return cInvokedUseCaseAssignment_3; }
		
		//[UseCase|ID]
		public CrossReference getInvokedUseCaseUseCaseCrossReference_3_0() { return cInvokedUseCaseUseCaseCrossReference_3_0; }
		
		//ID
		public RuleCall getInvokedUseCaseUseCaseIDTerminalRuleCall_3_0_1() { return cInvokedUseCaseUseCaseIDTerminalRuleCall_3_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//(description=STRING | ignoreDescription?=IGNORE_STRING)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_5_0() { return cDescriptionAssignment_5_0; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0_0() { return cDescriptionSTRINGTerminalRuleCall_5_0_0; }
		
		//ignoreDescription?=IGNORE_STRING
		public Assignment getIgnoreDescriptionAssignment_5_1() { return cIgnoreDescriptionAssignment_5_1; }
		
		//IGNORE_STRING
		public RuleCall getIgnoreDescriptionIGNORE_STRINGTerminalRuleCall_5_1_0() { return cIgnoreDescriptionIGNORE_STRINGTerminalRuleCall_5_1_0; }
	}
	public class ConditionControlStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.ConditionControlStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cIgnoreDescriptionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIgnoreDescriptionIGNORE_STRINGTerminalRuleCall_1_0 = (RuleCall)cIgnoreDescriptionAssignment_1.eContents().get(0);
		
		//ConditionControlStep:
		//    (description=STRING | ignoreDescription?=IGNORE_STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//(description=STRING | ignoreDescription?=IGNORE_STRING)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_0() { return cDescriptionSTRINGTerminalRuleCall_0_0; }
		
		//ignoreDescription?=IGNORE_STRING
		public Assignment getIgnoreDescriptionAssignment_1() { return cIgnoreDescriptionAssignment_1; }
		
		//IGNORE_STRING
		public RuleCall getIgnoreDescriptionIGNORE_STRINGTerminalRuleCall_1_0() { return cIgnoreDescriptionIGNORE_STRINGTerminalRuleCall_1_0; }
	}
	public class StepNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.StepNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMainStepNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtensionStepNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* Step Number Grammars */
		//// TODO: evolve grammar to include other types of steps.
		//StepNumber: (MainStepNumber | ExtensionStepNumber);
		@Override public ParserRule getRule() { return rule; }
		
		//(MainStepNumber | ExtensionStepNumber)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MainStepNumber
		public RuleCall getMainStepNumberParserRuleCall_0() { return cMainStepNumberParserRuleCall_0; }
		
		//ExtensionStepNumber
		public RuleCall getExtensionStepNumberParserRuleCall_1() { return cExtensionStepNumberParserRuleCall_1; }
	}
	public class GroupedStepsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.GroupedSteps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMainStepNumberParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cMainStepNumberParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GroupedSteps: '(' MainStepNumber '-' MainStepNumber ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' MainStepNumber '-' MainStepNumber ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//MainStepNumber
		public RuleCall getMainStepNumberParserRuleCall_1() { return cMainStepNumberParserRuleCall_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//MainStepNumber
		public RuleCall getMainStepNumberParserRuleCall_3() { return cMainStepNumberParserRuleCall_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MainStepNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.MainStepNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//MainStepNumber:
		//    INT ('.' INT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)*
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class ExtensionStepNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.ExtensionStepNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cMainStepNumberParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cGroupedStepsParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//ExtensionStepNumber:
		//    (MainStepNumber | GroupedSteps) ID
		//    ('.' INT ID?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(MainStepNumber | GroupedSteps) ID
		//('.' INT ID?)*
		public Group getGroup() { return cGroup; }
		
		//(MainStepNumber | GroupedSteps)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//MainStepNumber
		public RuleCall getMainStepNumberParserRuleCall_0_0() { return cMainStepNumberParserRuleCall_0_0; }
		
		//GroupedSteps
		public RuleCall getGroupedStepsParserRuleCall_0_1() { return cGroupedStepsParserRuleCall_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//('.' INT ID?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//ID?
		public RuleCall getIDTerminalRuleCall_2_2() { return cIDTerminalRuleCall_2_2; }
	}
	public class ExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.Exception");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnvironmentExceptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNetworkExceptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHardwareExceptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSoftwareExceptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///* Exception Grammars */
		//Exception:
		//    (EnvironmentException | NetworkException | HardwareException | SoftwareException);
		@Override public ParserRule getRule() { return rule; }
		
		//(EnvironmentException | NetworkException | HardwareException | SoftwareException)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnvironmentException
		public RuleCall getEnvironmentExceptionParserRuleCall_0() { return cEnvironmentExceptionParserRuleCall_0; }
		
		//NetworkException
		public RuleCall getNetworkExceptionParserRuleCall_1() { return cNetworkExceptionParserRuleCall_1; }
		
		//HardwareException
		public RuleCall getHardwareExceptionParserRuleCall_2() { return cHardwareExceptionParserRuleCall_2; }
		
		//SoftwareException
		public RuleCall getSoftwareExceptionParserRuleCall_3() { return cSoftwareExceptionParserRuleCall_3; }
	}
	public class EnvironmentExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.EnvironmentException");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cKeywordEnvironmentExceptionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnvironmentException: '{' KeywordEnvironmentException '::' name=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' KeywordEnvironmentException '::' name=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//KeywordEnvironmentException
		public RuleCall getKeywordEnvironmentExceptionParserRuleCall_1() { return cKeywordEnvironmentExceptionParserRuleCall_1; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NetworkExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.NetworkException");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cKeywordNetworkExceptionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NetworkException:     '{' KeywordNetworkException     '::' name=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' KeywordNetworkException     '::' name=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//KeywordNetworkException
		public RuleCall getKeywordNetworkExceptionParserRuleCall_1() { return cKeywordNetworkExceptionParserRuleCall_1; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class HardwareExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.HardwareException");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cKeywordHardwareExceptionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//HardwareException:    '{' KeywordHardwareException    '::' name=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' KeywordHardwareException    '::' name=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//KeywordHardwareException
		public RuleCall getKeywordHardwareExceptionParserRuleCall_1() { return cKeywordHardwareExceptionParserRuleCall_1; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SoftwareExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.SoftwareException");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cKeywordSoftwareExceptionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SoftwareException:    '{' KeywordSoftwareException    '::' name=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' KeywordSoftwareException    '::' name=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//KeywordSoftwareException
		public RuleCall getKeywordSoftwareExceptionParserRuleCall_1() { return cKeywordSoftwareExceptionParserRuleCall_1; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ContextExceptionMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.ContextExceptionMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cContextUseCaseCrossReference_0_0 = (CrossReference)cContextAssignment_0.eContents().get(0);
		private final RuleCall cContextUseCaseIDTerminalRuleCall_0_0_1 = (RuleCall)cContextUseCaseCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cKeywordExceptionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExceptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cExceptionExceptionCrossReference_4_0 = (CrossReference)cExceptionAssignment_4.eContents().get(0);
		private final RuleCall cExceptionExceptionIDTerminalRuleCall_4_0_1 = (RuleCall)cExceptionExceptionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* Context and Exception Grammars */
		//ContextExceptionMapping:
		//    (context=[UseCase|ID] '{' KeywordException '::' exception=[Exception] '}');
		@Override public ParserRule getRule() { return rule; }
		
		//(context=[UseCase|ID] '{' KeywordException '::' exception=[Exception] '}')
		public Group getGroup() { return cGroup; }
		
		//context=[UseCase|ID]
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }
		
		//[UseCase|ID]
		public CrossReference getContextUseCaseCrossReference_0_0() { return cContextUseCaseCrossReference_0_0; }
		
		//ID
		public RuleCall getContextUseCaseIDTerminalRuleCall_0_0_1() { return cContextUseCaseIDTerminalRuleCall_0_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//KeywordException
		public RuleCall getKeywordExceptionParserRuleCall_2() { return cKeywordExceptionParserRuleCall_2; }
		
		//'::'
		public Keyword getColonColonKeyword_3() { return cColonColonKeyword_3; }
		
		//exception=[Exception]
		public Assignment getExceptionAssignment_4() { return cExceptionAssignment_4; }
		
		//[Exception]
		public CrossReference getExceptionExceptionCrossReference_4_0() { return cExceptionExceptionCrossReference_4_0; }
		
		//ID
		public RuleCall getExceptionExceptionIDTerminalRuleCall_4_0_1() { return cExceptionExceptionIDTerminalRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.Actor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSecondaryActorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* Actor Grammars */
		//Actor: (PrimaryActor | SecondaryActor);
		@Override public ParserRule getRule() { return rule; }
		
		//(PrimaryActor | SecondaryActor)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryActor
		public RuleCall getPrimaryActorParserRuleCall_0() { return cPrimaryActorParserRuleCall_0; }
		
		//SecondaryActor
		public RuleCall getSecondaryActorParserRuleCall_1() { return cSecondaryActorParserRuleCall_1; }
	}
	public class PrimaryActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.PrimaryActor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHumanActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSoftwareActorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//PrimaryActor:
		//    (HumanActor | SoftwareActor | name=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//(HumanActor | SoftwareActor | name=ID)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HumanActor
		public RuleCall getHumanActorParserRuleCall_0() { return cHumanActorParserRuleCall_0; }
		
		//SoftwareActor
		public RuleCall getSoftwareActorParserRuleCall_1() { return cSoftwareActorParserRuleCall_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class SecondaryActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.SecondaryActor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHumanActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSoftwareActorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeviceActorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPhysicalEntityActorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//SecondaryActor:
		//    (HumanActor | SoftwareActor | DeviceActor | PhysicalEntityActor | name=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//(HumanActor | SoftwareActor | DeviceActor | PhysicalEntityActor | name=ID)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HumanActor
		public RuleCall getHumanActorParserRuleCall_0() { return cHumanActorParserRuleCall_0; }
		
		//SoftwareActor
		public RuleCall getSoftwareActorParserRuleCall_1() { return cSoftwareActorParserRuleCall_1; }
		
		//DeviceActor
		public RuleCall getDeviceActorParserRuleCall_2() { return cDeviceActorParserRuleCall_2; }
		
		//PhysicalEntityActor
		public RuleCall getPhysicalEntityActorParserRuleCall_3() { return cPhysicalEntityActorParserRuleCall_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}
	public class HumanActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.HumanActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHUMANKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//HumanActor:          'HUMAN'                                    '::' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'HUMAN'                                    '::' name=ID
		public Group getGroup() { return cGroup; }
		
		//'HUMAN'
		public Keyword getHUMANKeyword_0() { return cHUMANKeyword_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class SoftwareActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.SoftwareActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSOFTWAREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//SoftwareActor:       'SOFTWARE'                                 '::' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'SOFTWARE'                                 '::' name=ID
		public Group getGroup() { return cGroup; }
		
		//'SOFTWARE'
		public Keyword getSOFTWAREKeyword_0() { return cSOFTWAREKeyword_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class DeviceActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.DeviceActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSENSORKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cACTUATORKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cTAGKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cREADERKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//DeviceActor:         ('SENSOR' | 'ACTUATOR' | 'TAG' | 'READER') '::' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//('SENSOR' | 'ACTUATOR' | 'TAG' | 'READER') '::' name=ID
		public Group getGroup() { return cGroup; }
		
		//('SENSOR' | 'ACTUATOR' | 'TAG' | 'READER')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'SENSOR'
		public Keyword getSENSORKeyword_0_0() { return cSENSORKeyword_0_0; }
		
		//'ACTUATOR'
		public Keyword getACTUATORKeyword_0_1() { return cACTUATORKeyword_0_1; }
		
		//'TAG'
		public Keyword getTAGKeyword_0_2() { return cTAGKeyword_0_2; }
		
		//'READER'
		public Keyword getREADERKeyword_0_3() { return cREADERKeyword_0_3; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class PhysicalEntityActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.PhysicalEntityActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPHYSICAL_ENTITYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//PhysicalEntityActor: 'PHYSICAL_ENTITY'                          '::' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PHYSICAL_ENTITY'                          '::' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PHYSICAL_ENTITY'
		public Keyword getPHYSICAL_ENTITYKeyword_0() { return cPHYSICAL_ENTITYKeyword_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class KeywordStandardModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordStandardMode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStandardKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStandardKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cModeKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cModeKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		///* Keyword Grammars */
		//KeywordStandardMode:
		//    ('Standard' | 'standard')
		//    ('Mode' | 'mode');
		@Override public ParserRule getRule() { return rule; }
		
		//('Standard' | 'standard')
		//('Mode' | 'mode')
		public Group getGroup() { return cGroup; }
		
		//('Standard' | 'standard')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Standard'
		public Keyword getStandardKeyword_0_0() { return cStandardKeyword_0_0; }
		
		//'standard'
		public Keyword getStandardKeyword_0_1() { return cStandardKeyword_0_1; }
		
		//('Mode' | 'mode')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Mode'
		public Keyword getModeKeyword_1_0() { return cModeKeyword_1_0; }
		
		//'mode'
		public Keyword getModeKeyword_1_1() { return cModeKeyword_1_1; }
	}
	public class KeywordExceptionalUseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordExceptionalUseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUseKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cUseKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCaseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//KeywordExceptionalUseCase:
		//    ('Use' | 'use')
		//    ('Case' | 'case');
		@Override public ParserRule getRule() { return rule; }
		
		//('Use' | 'use')
		//('Case' | 'case')
		public Group getGroup() { return cGroup; }
		
		//('Use' | 'use')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Use'
		public Keyword getUseKeyword_0_0() { return cUseKeyword_0_0; }
		
		//'use'
		public Keyword getUseKeyword_0_1() { return cUseKeyword_0_1; }
		
		//('Case' | 'case')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Case'
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }
		
		//'case'
		public Keyword getCaseKeyword_1_1() { return cCaseKeyword_1_1; }
	}
	public class KeywordHandlerUseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordHandlerUseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHandlerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHandlerKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cUseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cCaseKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cCaseKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//KeywordHandlerUseCase:
		//    ('Handler' | 'handler')
		//    ('Use' | 'use')
		//    ('Case' | 'case');
		@Override public ParserRule getRule() { return rule; }
		
		//('Handler' | 'handler')
		//('Use' | 'use')
		//('Case' | 'case')
		public Group getGroup() { return cGroup; }
		
		//('Handler' | 'handler')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Handler'
		public Keyword getHandlerKeyword_0_0() { return cHandlerKeyword_0_0; }
		
		//'handler'
		public Keyword getHandlerKeyword_0_1() { return cHandlerKeyword_0_1; }
		
		//('Use' | 'use')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Use'
		public Keyword getUseKeyword_1_0() { return cUseKeyword_1_0; }
		
		//'use'
		public Keyword getUseKeyword_1_1() { return cUseKeyword_1_1; }
		
		//('Case' | 'case')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Case'
		public Keyword getCaseKeyword_2_0() { return cCaseKeyword_2_0; }
		
		//'case'
		public Keyword getCaseKeyword_2_1() { return cCaseKeyword_2_1; }
	}
	public class KeywordScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cScopeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cScopeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//KeywordScope:
		//    ('Scope' | 'scope');
		@Override public ParserRule getRule() { return rule; }
		
		//('Scope' | 'scope')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Scope'
		public Keyword getScopeKeyword_0() { return cScopeKeyword_0; }
		
		//'scope'
		public Keyword getScopeKeyword_1() { return cScopeKeyword_1; }
	}
	public class KeywordIntentionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordIntention");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntentionKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntentionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//KeywordIntention:
		//    ('Intention' | 'intention');
		@Override public ParserRule getRule() { return rule; }
		
		//('Intention' | 'intention')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Intention'
		public Keyword getIntentionKeyword_0() { return cIntentionKeyword_0; }
		
		//'intention'
		public Keyword getIntentionKeyword_1() { return cIntentionKeyword_1; }
	}
	public class KeywordLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLevelKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLevelKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//KeywordLevel:
		//    ('Level' | 'level');
		@Override public ParserRule getRule() { return rule; }
		
		//('Level' | 'level')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Level'
		public Keyword getLevelKeyword_0() { return cLevelKeyword_0; }
		
		//'level'
		public Keyword getLevelKeyword_1() { return cLevelKeyword_1; }
	}
	public class KeywordMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordMultiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMultiplicityKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMultiplicityKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//KeywordMultiplicity:
		//    ('Multiplicity' | 'multiplicity');
		@Override public ParserRule getRule() { return rule; }
		
		//('Multiplicity' | 'multiplicity')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Multiplicity'
		public Keyword getMultiplicityKeyword_0() { return cMultiplicityKeyword_0; }
		
		//'multiplicity'
		public Keyword getMultiplicityKeyword_1() { return cMultiplicityKeyword_1; }
	}
	public class KeywordPreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordPrecondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPreconditionKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPreconditionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//KeywordPrecondition:
		//    ('Precondition'  | 'precondition');
		@Override public ParserRule getRule() { return rule; }
		
		//('Precondition'  | 'precondition')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Precondition'
		public Keyword getPreconditionKeyword_0() { return cPreconditionKeyword_0; }
		
		//'precondition'
		public Keyword getPreconditionKeyword_1() { return cPreconditionKeyword_1; }
	}
	public class KeywordPostconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordPostcondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPostconditionKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPostconditionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//KeywordPostcondition:
		//    ('Postcondition' | 'postcondition');
		@Override public ParserRule getRule() { return rule; }
		
		//('Postcondition' | 'postcondition')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Postcondition'
		public Keyword getPostconditionKeyword_0() { return cPostconditionKeyword_0; }
		
		//'postcondition'
		public Keyword getPostconditionKeyword_1() { return cPostconditionKeyword_1; }
	}
	public class KeywordHandlerClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordHandlerClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHandlerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHandlerKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cClassKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cClassKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//KeywordHandlerClass:
		//    ('Handler' | 'handler')
		//    ('Class' | 'class');
		@Override public ParserRule getRule() { return rule; }
		
		//('Handler' | 'handler')
		//('Class' | 'class')
		public Group getGroup() { return cGroup; }
		
		//('Handler' | 'handler')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Handler'
		public Keyword getHandlerKeyword_0_0() { return cHandlerKeyword_0_0; }
		
		//'handler'
		public Keyword getHandlerKeyword_0_1() { return cHandlerKeyword_0_1; }
		
		//('Class' | 'class')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Class'
		public Keyword getClassKeyword_1_0() { return cClassKeyword_1_0; }
		
		//'class'
		public Keyword getClassKeyword_1_1() { return cClassKeyword_1_1; }
	}
	public class KeywordContextExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordContextException");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cContextsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cContextsKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cExceptionsKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cExceptionsKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//KeywordContextException:
		//    ('Contexts' | 'contexts')
		//    ('And' | 'and')
		//    ('Exceptions' | 'exceptions');
		@Override public ParserRule getRule() { return rule; }
		
		//('Contexts' | 'contexts')
		//('And' | 'and')
		//('Exceptions' | 'exceptions')
		public Group getGroup() { return cGroup; }
		
		//('Contexts' | 'contexts')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Contexts'
		public Keyword getContextsKeyword_0_0() { return cContextsKeyword_0_0; }
		
		//'contexts'
		public Keyword getContextsKeyword_0_1() { return cContextsKeyword_0_1; }
		
		//('And' | 'and')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'And'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//('Exceptions' | 'exceptions')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Exceptions'
		public Keyword getExceptionsKeyword_2_0() { return cExceptionsKeyword_2_0; }
		
		//'exceptions'
		public Keyword getExceptionsKeyword_2_1() { return cExceptionsKeyword_2_1; }
	}
	public class KeywordMainSuccessScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordMainSuccessScenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMainKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMainKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSuccessKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSuccessKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cScenarioKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cScenarioKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//KeywordMainSuccessScenario:
		//    ('Main' | 'main')
		//    ('Success' | 'success')?
		//    ('Scenario' | 'scenario')?;
		@Override public ParserRule getRule() { return rule; }
		
		//('Main' | 'main')
		//('Success' | 'success')?
		//('Scenario' | 'scenario')?
		public Group getGroup() { return cGroup; }
		
		//('Main' | 'main')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Main'
		public Keyword getMainKeyword_0_0() { return cMainKeyword_0_0; }
		
		//'main'
		public Keyword getMainKeyword_0_1() { return cMainKeyword_0_1; }
		
		//('Success' | 'success')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Success'
		public Keyword getSuccessKeyword_1_0() { return cSuccessKeyword_1_0; }
		
		//'success'
		public Keyword getSuccessKeyword_1_1() { return cSuccessKeyword_1_1; }
		
		//('Scenario' | 'scenario')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Scenario'
		public Keyword getScenarioKeyword_2_0() { return cScenarioKeyword_2_0; }
		
		//'scenario'
		public Keyword getScenarioKeyword_2_1() { return cScenarioKeyword_2_1; }
	}
	public class KeywordExtensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordExtensions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExtensionsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExtensionsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//KeywordExtensions:
		//    ('Extensions' | 'extensions');
		@Override public ParserRule getRule() { return rule; }
		
		//('Extensions' | 'extensions')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Extensions'
		public Keyword getExtensionsKeyword_0() { return cExtensionsKeyword_0; }
		
		//'extensions'
		public Keyword getExtensionsKeyword_1() { return cExtensionsKeyword_1; }
	}
	public class KeywordAlternateBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordAlternateBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAlternativeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAlternativeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//KeywordAlternateBlock:
		//    ('Alternative' | 'alternative');
		@Override public ParserRule getRule() { return rule; }
		
		//('Alternative' | 'alternative')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Alternative'
		public Keyword getAlternativeKeyword_0() { return cAlternativeKeyword_0; }
		
		//'alternative'
		public Keyword getAlternativeKeyword_1() { return cAlternativeKeyword_1; }
	}
	public class KeywordExceptionalBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordExceptionalBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExceptionKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExceptionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//KeywordExceptionalBlock:
		//    ('Exception' | 'exception');
		@Override public ParserRule getRule() { return rule; }
		
		//('Exception' | 'exception')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Exception'
		public Keyword getExceptionKeyword_0() { return cExceptionKeyword_0; }
		
		//'exception'
		public Keyword getExceptionKeyword_1() { return cExceptionKeyword_1; }
	}
	public class KeywordStepExceptionalBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordStepExceptionalBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStepKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStepKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cLevelKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cLevelKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cExceptionKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cExceptionKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//KeywordStepExceptionalBlock:
		//    ('Step' | 'step') ('-')
		//    ('Level' | 'level')
		//    ('Exception' | 'exception');
		@Override public ParserRule getRule() { return rule; }
		
		//('Step' | 'step') ('-')
		//('Level' | 'level')
		//('Exception' | 'exception')
		public Group getGroup() { return cGroup; }
		
		//('Step' | 'step')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Step'
		public Keyword getStepKeyword_0_0() { return cStepKeyword_0_0; }
		
		//'step'
		public Keyword getStepKeyword_0_1() { return cStepKeyword_0_1; }
		
		//('-')
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//('Level' | 'level')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Level'
		public Keyword getLevelKeyword_2_0() { return cLevelKeyword_2_0; }
		
		//'level'
		public Keyword getLevelKeyword_2_1() { return cLevelKeyword_2_1; }
		
		//('Exception' | 'exception')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'Exception'
		public Keyword getExceptionKeyword_3_0() { return cExceptionKeyword_3_0; }
		
		//'exception'
		public Keyword getExceptionKeyword_3_1() { return cExceptionKeyword_3_1; }
	}
	public class KeywordSceneExceptionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordSceneExceptionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSceneKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSceneKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cLevelKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cLevelKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cExceptionKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cExceptionKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//KeywordSceneExceptionBlock:
		//    ('Scene' | 'scene') ('-')
		//    ('Level' | 'level')
		//    ('Exception' | 'exception');
		@Override public ParserRule getRule() { return rule; }
		
		//('Scene' | 'scene') ('-')
		//('Level' | 'level')
		//('Exception' | 'exception')
		public Group getGroup() { return cGroup; }
		
		//('Scene' | 'scene')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Scene'
		public Keyword getSceneKeyword_0_0() { return cSceneKeyword_0_0; }
		
		//'scene'
		public Keyword getSceneKeyword_0_1() { return cSceneKeyword_0_1; }
		
		//('-')
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//('Level' | 'level')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Level'
		public Keyword getLevelKeyword_2_0() { return cLevelKeyword_2_0; }
		
		//'level'
		public Keyword getLevelKeyword_2_1() { return cLevelKeyword_2_1; }
		
		//('Exception' | 'exception')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'Exception'
		public Keyword getExceptionKeyword_3_0() { return cExceptionKeyword_3_0; }
		
		//'exception'
		public Keyword getExceptionKeyword_3_1() { return cExceptionKeyword_3_1; }
	}
	public class KeywordChildListBeginsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordChildListBegins");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNestedKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNestedKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cExtensionsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cExtensionsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cBeginKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cBeginKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//KeywordChildListBegins:
		//    ('Nested' | 'nested')
		//    ('Extensions' | 'extensions')
		//    ('Begin' | 'begin');
		@Override public ParserRule getRule() { return rule; }
		
		//('Nested' | 'nested')
		//('Extensions' | 'extensions')
		//('Begin' | 'begin')
		public Group getGroup() { return cGroup; }
		
		//('Nested' | 'nested')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Nested'
		public Keyword getNestedKeyword_0_0() { return cNestedKeyword_0_0; }
		
		//'nested'
		public Keyword getNestedKeyword_0_1() { return cNestedKeyword_0_1; }
		
		//('Extensions' | 'extensions')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Extensions'
		public Keyword getExtensionsKeyword_1_0() { return cExtensionsKeyword_1_0; }
		
		//'extensions'
		public Keyword getExtensionsKeyword_1_1() { return cExtensionsKeyword_1_1; }
		
		//('Begin' | 'begin')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Begin'
		public Keyword getBeginKeyword_2_0() { return cBeginKeyword_2_0; }
		
		//'begin'
		public Keyword getBeginKeyword_2_1() { return cBeginKeyword_2_1; }
	}
	public class KeywordChildListEndsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordChildListEnds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNestedKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNestedKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cExtensionsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cExtensionsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEndsKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cEndsKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//KeywordChildListEnds:
		//    ('Nested' | 'nested')
		//    ('Extensions' | 'extensions')
		//    ('Ends' | 'ends');
		@Override public ParserRule getRule() { return rule; }
		
		//('Nested' | 'nested')
		//('Extensions' | 'extensions')
		//('Ends' | 'ends')
		public Group getGroup() { return cGroup; }
		
		//('Nested' | 'nested')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Nested'
		public Keyword getNestedKeyword_0_0() { return cNestedKeyword_0_0; }
		
		//'nested'
		public Keyword getNestedKeyword_0_1() { return cNestedKeyword_0_1; }
		
		//('Extensions' | 'extensions')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Extensions'
		public Keyword getExtensionsKeyword_1_0() { return cExtensionsKeyword_1_0; }
		
		//'extensions'
		public Keyword getExtensionsKeyword_1_1() { return cExtensionsKeyword_1_1; }
		
		//('Ends' | 'ends')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Ends'
		public Keyword getEndsKeyword_2_0() { return cEndsKeyword_2_0; }
		
		//'ends'
		public Keyword getEndsKeyword_2_1() { return cEndsKeyword_2_1; }
	}
	public class KeywordPrimaryActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordPrimaryActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPrimaryKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPrimaryKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cActorKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cActorKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//KeywordPrimaryActor:
		//    ('Primary' | 'primary')
		//    ('Actor' | 'actor');
		@Override public ParserRule getRule() { return rule; }
		
		//('Primary' | 'primary')
		//('Actor' | 'actor')
		public Group getGroup() { return cGroup; }
		
		//('Primary' | 'primary')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Primary'
		public Keyword getPrimaryKeyword_0_0() { return cPrimaryKeyword_0_0; }
		
		//'primary'
		public Keyword getPrimaryKeyword_0_1() { return cPrimaryKeyword_0_1; }
		
		//('Actor' | 'actor')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Actor'
		public Keyword getActorKeyword_1_0() { return cActorKeyword_1_0; }
		
		//'actor'
		public Keyword getActorKeyword_1_1() { return cActorKeyword_1_1; }
	}
	public class KeywordSecondaryActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordSecondaryActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSecondaryKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSecondaryKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cActorKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cActorKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//KeywordSecondaryActor:
		//    ('Secondary' | 'secondary')
		//    ('Actor' | 'actor');
		@Override public ParserRule getRule() { return rule; }
		
		//('Secondary' | 'secondary')
		//('Actor' | 'actor')
		public Group getGroup() { return cGroup; }
		
		//('Secondary' | 'secondary')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Secondary'
		public Keyword getSecondaryKeyword_0_0() { return cSecondaryKeyword_0_0; }
		
		//'secondary'
		public Keyword getSecondaryKeyword_0_1() { return cSecondaryKeyword_0_1; }
		
		//('Actor' | 'actor')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Actor'
		public Keyword getActorKeyword_1_0() { return cActorKeyword_1_0; }
		
		//'actor'
		public Keyword getActorKeyword_1_1() { return cActorKeyword_1_1; }
	}
	public class KeywordFacilitatorActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordFacilitatorActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFacilitatorKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cFacilitatorKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cActorKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cActorKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//KeywordFacilitatorActor:
		//    ('Facilitator' | 'facilitator')
		//    ('Actor' | 'actor');
		@Override public ParserRule getRule() { return rule; }
		
		//('Facilitator' | 'facilitator')
		//('Actor' | 'actor')
		public Group getGroup() { return cGroup; }
		
		//('Facilitator' | 'facilitator')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Facilitator'
		public Keyword getFacilitatorKeyword_0_0() { return cFacilitatorKeyword_0_0; }
		
		//'facilitator'
		public Keyword getFacilitatorKeyword_0_1() { return cFacilitatorKeyword_0_1; }
		
		//('Actor' | 'actor')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Actor'
		public Keyword getActorKeyword_1_0() { return cActorKeyword_1_0; }
		
		//'actor'
		public Keyword getActorKeyword_1_1() { return cActorKeyword_1_1; }
	}
	public class KeywordExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordException");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKeywordEnvironmentExceptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordNetworkExceptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKeywordHardwareExceptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cKeywordSoftwareExceptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//KeywordException: (KeywordEnvironmentException | KeywordNetworkException | KeywordHardwareException | KeywordSoftwareException);
		@Override public ParserRule getRule() { return rule; }
		
		//(KeywordEnvironmentException | KeywordNetworkException | KeywordHardwareException | KeywordSoftwareException)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KeywordEnvironmentException
		public RuleCall getKeywordEnvironmentExceptionParserRuleCall_0() { return cKeywordEnvironmentExceptionParserRuleCall_0; }
		
		//KeywordNetworkException
		public RuleCall getKeywordNetworkExceptionParserRuleCall_1() { return cKeywordNetworkExceptionParserRuleCall_1; }
		
		//KeywordHardwareException
		public RuleCall getKeywordHardwareExceptionParserRuleCall_2() { return cKeywordHardwareExceptionParserRuleCall_2; }
		
		//KeywordSoftwareException
		public RuleCall getKeywordSoftwareExceptionParserRuleCall_3() { return cKeywordSoftwareExceptionParserRuleCall_3; }
	}
	public class KeywordEnvironmentExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordEnvironmentException");
		private final Keyword cENVIRONMENT_EXCEPTIONKeyword = (Keyword)rule.eContents().get(1);
		
		//KeywordEnvironmentException: 'ENVIRONMENT_EXCEPTION';
		@Override public ParserRule getRule() { return rule; }
		
		//'ENVIRONMENT_EXCEPTION'
		public Keyword getENVIRONMENT_EXCEPTIONKeyword() { return cENVIRONMENT_EXCEPTIONKeyword; }
	}
	public class KeywordNetworkExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordNetworkException");
		private final Keyword cNETWORK_EXCEPTIONKeyword = (Keyword)rule.eContents().get(1);
		
		//KeywordNetworkException:     'NETWORK_EXCEPTION';
		@Override public ParserRule getRule() { return rule; }
		
		//'NETWORK_EXCEPTION'
		public Keyword getNETWORK_EXCEPTIONKeyword() { return cNETWORK_EXCEPTIONKeyword; }
	}
	public class KeywordHardwareExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordHardwareException");
		private final Keyword cHARDWARE_EXCEPTIONKeyword = (Keyword)rule.eContents().get(1);
		
		//KeywordHardwareException:    'HARDWARE_EXCEPTION';
		@Override public ParserRule getRule() { return rule; }
		
		//'HARDWARE_EXCEPTION'
		public Keyword getHARDWARE_EXCEPTIONKeyword() { return cHARDWARE_EXCEPTIONKeyword; }
	}
	public class KeywordSoftwareExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordSoftwareException");
		private final Keyword cSOFTWARE_EXCEPTIONKeyword = (Keyword)rule.eContents().get(1);
		
		//KeywordSoftwareException:    'SOFTWARE_EXCEPTION';
		@Override public ParserRule getRule() { return rule; }
		
		//'SOFTWARE_EXCEPTION'
		public Keyword getSOFTWARE_EXCEPTIONKeyword() { return cSOFTWARE_EXCEPTIONKeyword; }
	}
	public class KeywordOutcomeEndsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordOutcomeEnds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUseKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cUseKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCaseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEndsKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cEndsKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cInKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//KeywordOutcomeEnds:
		//    ('Use' | 'use')
		//    ('Case' | 'case')
		//    ('Ends' | 'ends')
		//    ('In' | 'in');
		@Override public ParserRule getRule() { return rule; }
		
		//('Use' | 'use')
		//('Case' | 'case')
		//('Ends' | 'ends')
		//('In' | 'in')
		public Group getGroup() { return cGroup; }
		
		//('Use' | 'use')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Use'
		public Keyword getUseKeyword_0_0() { return cUseKeyword_0_0; }
		
		//'use'
		public Keyword getUseKeyword_0_1() { return cUseKeyword_0_1; }
		
		//('Case' | 'case')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Case'
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }
		
		//'case'
		public Keyword getCaseKeyword_1_1() { return cCaseKeyword_1_1; }
		
		//('Ends' | 'ends')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Ends'
		public Keyword getEndsKeyword_2_0() { return cEndsKeyword_2_0; }
		
		//'ends'
		public Keyword getEndsKeyword_2_1() { return cEndsKeyword_2_1; }
		
		//('In' | 'in')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'In'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'in'
		public Keyword getInKeyword_3_1() { return cInKeyword_3_1; }
	}
	public class KeywordOutcomeContElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.KeywordOutcomeCont");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUseKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cUseKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCaseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cContinuesKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cContinuesKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cAtKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cAtKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cStepKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cStepKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//KeywordOutcomeCont:
		//    ('Use' | 'use')
		//    ('Case' | 'case')
		//    ('Continues' | 'continues')
		//    ('At' | 'at')
		//    ('Step' | 'step');
		@Override public ParserRule getRule() { return rule; }
		
		//('Use' | 'use')
		//('Case' | 'case')
		//('Continues' | 'continues')
		//('At' | 'at')
		//('Step' | 'step')
		public Group getGroup() { return cGroup; }
		
		//('Use' | 'use')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Use'
		public Keyword getUseKeyword_0_0() { return cUseKeyword_0_0; }
		
		//'use'
		public Keyword getUseKeyword_0_1() { return cUseKeyword_0_1; }
		
		//('Case' | 'case')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Case'
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }
		
		//'case'
		public Keyword getCaseKeyword_1_1() { return cCaseKeyword_1_1; }
		
		//('Continues' | 'continues')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'Continues'
		public Keyword getContinuesKeyword_2_0() { return cContinuesKeyword_2_0; }
		
		//'continues'
		public Keyword getContinuesKeyword_2_1() { return cContinuesKeyword_2_1; }
		
		//('At' | 'at')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'At'
		public Keyword getAtKeyword_3_0() { return cAtKeyword_3_0; }
		
		//'at'
		public Keyword getAtKeyword_3_1() { return cAtKeyword_3_1; }
		
		//('Step' | 'step')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'Step'
		public Keyword getStepKeyword_4_0() { return cStepKeyword_4_0; }
		
		//'step'
		public Keyword getStepKeyword_4_1() { return cStepKeyword_4_1; }
	}
	public class NoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.None");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNoneKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNoneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		///* Common Grammar Elements */
		//None: 'None' | 'none';
		@Override public ParserRule getRule() { return rule; }
		
		//'None' | 'none'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'None'
		public Keyword getNoneKeyword_0() { return cNoneKeyword_0; }
		
		//'none'
		public Keyword getNoneKeyword_1() { return cNoneKeyword_1; }
	}
	public class NotApplicableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.NotApplicable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNAKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNAKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NotApplicable: 'N/A' | 'n/a';
		@Override public ParserRule getRule() { return rule; }
		
		//'N/A' | 'n/a'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'N/A'
		public Keyword getNAKeyword_0() { return cNAKeyword_0; }
		
		//'n/a'
		public Keyword getNAKeyword_1() { return cNAKeyword_1; }
	}
	
	public class LevelElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.Level");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUMMARYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUMMARYSUMMARYKeyword_0_0 = (Keyword)cSUMMARYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUSER_GOALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUSER_GOALUSER_GOALKeyword_1_0 = (Keyword)cUSER_GOALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUBFUNCTIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUBFUNCTIONSUB_FUNCTIONKeyword_2_0 = (Keyword)cSUBFUNCTIONEnumLiteralDeclaration_2.eContents().get(0);
		
		///* Enumerable values */
		//enum Level:
		//    SUMMARY='SUMMARY' | USER_GOAL='USER_GOAL' | SUBFUNCTION='SUB_FUNCTION';
		public EnumRule getRule() { return rule; }
		
		//SUMMARY='SUMMARY' | USER_GOAL='USER_GOAL' | SUBFUNCTION='SUB_FUNCTION'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SUMMARY='SUMMARY'
		public EnumLiteralDeclaration getSUMMARYEnumLiteralDeclaration_0() { return cSUMMARYEnumLiteralDeclaration_0; }
		
		//'SUMMARY'
		public Keyword getSUMMARYSUMMARYKeyword_0_0() { return cSUMMARYSUMMARYKeyword_0_0; }
		
		//USER_GOAL='USER_GOAL'
		public EnumLiteralDeclaration getUSER_GOALEnumLiteralDeclaration_1() { return cUSER_GOALEnumLiteralDeclaration_1; }
		
		//'USER_GOAL'
		public Keyword getUSER_GOALUSER_GOALKeyword_1_0() { return cUSER_GOALUSER_GOALKeyword_1_0; }
		
		//SUBFUNCTION='SUB_FUNCTION'
		public EnumLiteralDeclaration getSUBFUNCTIONEnumLiteralDeclaration_2() { return cSUBFUNCTIONEnumLiteralDeclaration_2; }
		
		//'SUB_FUNCTION'
		public Keyword getSUBFUNCTIONSUB_FUNCTIONKeyword_2_0() { return cSUBFUNCTIONSUB_FUNCTIONKeyword_2_0; }
	}
	public class OutcomeEndingsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.OutcomeEndings");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUCCESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUCCESSSUCCESSKeyword_0_0 = (Keyword)cSUCCESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFAILUREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFAILUREFAILUREKeyword_1_0 = (Keyword)cFAILUREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDEGRADEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDEGRADEDDEGRADEDKeyword_2_0 = (Keyword)cDEGRADEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cABANDONEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cABANDONEDABANDONEDKeyword_3_0 = (Keyword)cABANDONEDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum OutcomeEndings:
		//    SUCCESS='SUCCESS' | FAILURE='FAILURE' | DEGRADED='DEGRADED' | ABANDONED='ABANDONED';
		public EnumRule getRule() { return rule; }
		
		//SUCCESS='SUCCESS' | FAILURE='FAILURE' | DEGRADED='DEGRADED' | ABANDONED='ABANDONED'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SUCCESS='SUCCESS'
		public EnumLiteralDeclaration getSUCCESSEnumLiteralDeclaration_0() { return cSUCCESSEnumLiteralDeclaration_0; }
		
		//'SUCCESS'
		public Keyword getSUCCESSSUCCESSKeyword_0_0() { return cSUCCESSSUCCESSKeyword_0_0; }
		
		//FAILURE='FAILURE'
		public EnumLiteralDeclaration getFAILUREEnumLiteralDeclaration_1() { return cFAILUREEnumLiteralDeclaration_1; }
		
		//'FAILURE'
		public Keyword getFAILUREFAILUREKeyword_1_0() { return cFAILUREFAILUREKeyword_1_0; }
		
		//DEGRADED='DEGRADED'
		public EnumLiteralDeclaration getDEGRADEDEnumLiteralDeclaration_2() { return cDEGRADEDEnumLiteralDeclaration_2; }
		
		//'DEGRADED'
		public Keyword getDEGRADEDDEGRADEDKeyword_2_0() { return cDEGRADEDDEGRADEDKeyword_2_0; }
		
		//ABANDONED='ABANDONED'
		public EnumLiteralDeclaration getABANDONEDEnumLiteralDeclaration_3() { return cABANDONEDEnumLiteralDeclaration_3; }
		
		//'ABANDONED'
		public Keyword getABANDONEDABANDONEDKeyword_3_0() { return cABANDONEDABANDONEDKeyword_3_0; }
	}
	
	private final IoTUseCaseModelElements pIoTUseCaseModel;
	private final UseCaseElements pUseCase;
	private final ExceptionalUseCaseElements pExceptionalUseCase;
	private final HandlerUseCaseElements pHandlerUseCase;
	private final MainScenarioElements pMainScenario;
	private final ExtensionsElements pExtensions;
	private final ExtensionBlockElements pExtensionBlock;
	private final AlternateBlockElements pAlternateBlock;
	private final ExceptionalBlockElements pExceptionalBlock;
	private final OutcomeElements pOutcome;
	private final OutcomeEndsElements pOutcomeEnds;
	private final OutcomeContinuesElements pOutcomeContinues;
	private final StepElements pStep;
	private final InteractionStepElements pInteractionStep;
	private final InvocationStepElements pInvocationStep;
	private final ConditionControlStepElements pConditionControlStep;
	private final StepNumberElements pStepNumber;
	private final GroupedStepsElements pGroupedSteps;
	private final MainStepNumberElements pMainStepNumber;
	private final ExtensionStepNumberElements pExtensionStepNumber;
	private final ExceptionElements pException;
	private final EnvironmentExceptionElements pEnvironmentException;
	private final NetworkExceptionElements pNetworkException;
	private final HardwareExceptionElements pHardwareException;
	private final SoftwareExceptionElements pSoftwareException;
	private final ContextExceptionMappingElements pContextExceptionMapping;
	private final ActorElements pActor;
	private final PrimaryActorElements pPrimaryActor;
	private final SecondaryActorElements pSecondaryActor;
	private final HumanActorElements pHumanActor;
	private final SoftwareActorElements pSoftwareActor;
	private final DeviceActorElements pDeviceActor;
	private final PhysicalEntityActorElements pPhysicalEntityActor;
	private final KeywordStandardModeElements pKeywordStandardMode;
	private final KeywordExceptionalUseCaseElements pKeywordExceptionalUseCase;
	private final KeywordHandlerUseCaseElements pKeywordHandlerUseCase;
	private final KeywordScopeElements pKeywordScope;
	private final KeywordIntentionElements pKeywordIntention;
	private final KeywordLevelElements pKeywordLevel;
	private final KeywordMultiplicityElements pKeywordMultiplicity;
	private final KeywordPreconditionElements pKeywordPrecondition;
	private final KeywordPostconditionElements pKeywordPostcondition;
	private final KeywordHandlerClassElements pKeywordHandlerClass;
	private final KeywordContextExceptionElements pKeywordContextException;
	private final KeywordMainSuccessScenarioElements pKeywordMainSuccessScenario;
	private final KeywordExtensionsElements pKeywordExtensions;
	private final KeywordAlternateBlockElements pKeywordAlternateBlock;
	private final KeywordExceptionalBlockElements pKeywordExceptionalBlock;
	private final KeywordStepExceptionalBlockElements pKeywordStepExceptionalBlock;
	private final KeywordSceneExceptionBlockElements pKeywordSceneExceptionBlock;
	private final KeywordChildListBeginsElements pKeywordChildListBegins;
	private final KeywordChildListEndsElements pKeywordChildListEnds;
	private final KeywordPrimaryActorElements pKeywordPrimaryActor;
	private final KeywordSecondaryActorElements pKeywordSecondaryActor;
	private final KeywordFacilitatorActorElements pKeywordFacilitatorActor;
	private final KeywordExceptionElements pKeywordException;
	private final KeywordEnvironmentExceptionElements pKeywordEnvironmentException;
	private final KeywordNetworkExceptionElements pKeywordNetworkException;
	private final KeywordHardwareExceptionElements pKeywordHardwareException;
	private final KeywordSoftwareExceptionElements pKeywordSoftwareException;
	private final KeywordOutcomeEndsElements pKeywordOutcomeEnds;
	private final KeywordOutcomeContElements pKeywordOutcomeCont;
	private final LevelElements eLevel;
	private final OutcomeEndingsElements eOutcomeEndings;
	private final TerminalRule tIGNORE_STRING;
	private final NoneElements pNone;
	private final NotApplicableElements pNotApplicable;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Ucm4iotGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pIoTUseCaseModel = new IoTUseCaseModelElements();
		this.pUseCase = new UseCaseElements();
		this.pExceptionalUseCase = new ExceptionalUseCaseElements();
		this.pHandlerUseCase = new HandlerUseCaseElements();
		this.pMainScenario = new MainScenarioElements();
		this.pExtensions = new ExtensionsElements();
		this.pExtensionBlock = new ExtensionBlockElements();
		this.pAlternateBlock = new AlternateBlockElements();
		this.pExceptionalBlock = new ExceptionalBlockElements();
		this.pOutcome = new OutcomeElements();
		this.pOutcomeEnds = new OutcomeEndsElements();
		this.pOutcomeContinues = new OutcomeContinuesElements();
		this.pStep = new StepElements();
		this.pInteractionStep = new InteractionStepElements();
		this.pInvocationStep = new InvocationStepElements();
		this.pConditionControlStep = new ConditionControlStepElements();
		this.pStepNumber = new StepNumberElements();
		this.pGroupedSteps = new GroupedStepsElements();
		this.pMainStepNumber = new MainStepNumberElements();
		this.pExtensionStepNumber = new ExtensionStepNumberElements();
		this.pException = new ExceptionElements();
		this.pEnvironmentException = new EnvironmentExceptionElements();
		this.pNetworkException = new NetworkExceptionElements();
		this.pHardwareException = new HardwareExceptionElements();
		this.pSoftwareException = new SoftwareExceptionElements();
		this.pContextExceptionMapping = new ContextExceptionMappingElements();
		this.pActor = new ActorElements();
		this.pPrimaryActor = new PrimaryActorElements();
		this.pSecondaryActor = new SecondaryActorElements();
		this.pHumanActor = new HumanActorElements();
		this.pSoftwareActor = new SoftwareActorElements();
		this.pDeviceActor = new DeviceActorElements();
		this.pPhysicalEntityActor = new PhysicalEntityActorElements();
		this.pKeywordStandardMode = new KeywordStandardModeElements();
		this.pKeywordExceptionalUseCase = new KeywordExceptionalUseCaseElements();
		this.pKeywordHandlerUseCase = new KeywordHandlerUseCaseElements();
		this.pKeywordScope = new KeywordScopeElements();
		this.pKeywordIntention = new KeywordIntentionElements();
		this.pKeywordLevel = new KeywordLevelElements();
		this.pKeywordMultiplicity = new KeywordMultiplicityElements();
		this.pKeywordPrecondition = new KeywordPreconditionElements();
		this.pKeywordPostcondition = new KeywordPostconditionElements();
		this.pKeywordHandlerClass = new KeywordHandlerClassElements();
		this.pKeywordContextException = new KeywordContextExceptionElements();
		this.pKeywordMainSuccessScenario = new KeywordMainSuccessScenarioElements();
		this.pKeywordExtensions = new KeywordExtensionsElements();
		this.pKeywordAlternateBlock = new KeywordAlternateBlockElements();
		this.pKeywordExceptionalBlock = new KeywordExceptionalBlockElements();
		this.pKeywordStepExceptionalBlock = new KeywordStepExceptionalBlockElements();
		this.pKeywordSceneExceptionBlock = new KeywordSceneExceptionBlockElements();
		this.pKeywordChildListBegins = new KeywordChildListBeginsElements();
		this.pKeywordChildListEnds = new KeywordChildListEndsElements();
		this.pKeywordPrimaryActor = new KeywordPrimaryActorElements();
		this.pKeywordSecondaryActor = new KeywordSecondaryActorElements();
		this.pKeywordFacilitatorActor = new KeywordFacilitatorActorElements();
		this.pKeywordException = new KeywordExceptionElements();
		this.pKeywordEnvironmentException = new KeywordEnvironmentExceptionElements();
		this.pKeywordNetworkException = new KeywordNetworkExceptionElements();
		this.pKeywordHardwareException = new KeywordHardwareExceptionElements();
		this.pKeywordSoftwareException = new KeywordSoftwareExceptionElements();
		this.pKeywordOutcomeEnds = new KeywordOutcomeEndsElements();
		this.pKeywordOutcomeCont = new KeywordOutcomeContElements();
		this.eLevel = new LevelElements();
		this.eOutcomeEndings = new OutcomeEndingsElements();
		this.tIGNORE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mde.iot.ucm4iot.Ucm4iot.IGNORE_STRING");
		this.pNone = new NoneElements();
		this.pNotApplicable = new NotApplicableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mde.iot.ucm4iot.Ucm4iot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///* Root Grammar */
	//IoTUseCaseModel:
	//    ({IoTUseCaseModel} '!' KeywordStandardMode ':' (standardMode?='on' | 'off') )?
	//    (useCases+=UseCase)*;
	public IoTUseCaseModelElements getIoTUseCaseModelAccess() {
		return pIoTUseCaseModel;
	}
	
	public ParserRule getIoTUseCaseModelRule() {
		return getIoTUseCaseModelAccess().getRule();
	}
	
	///* Use Case Grammars */
	//UseCase:
	//    (ExceptionalUseCase | HandlerUseCase)
	//    KeywordMainSuccessScenario ':' main=MainScenario
	//    (KeywordExtensions ':' extensions=Extensions)?;
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}
	
	//ExceptionalUseCase:
	//    KeywordExceptionalUseCase ':' name=ID
	//    ((KeywordScope        ':'  scope=ID)              &
	//    (KeywordIntention     ':'  intent=STRING)         &
	//    (KeywordLevel         ':'  level=Level)           &
	//    (KeywordMultiplicity  ':'  multiplicity=STRING) ? &
	//    (KeywordPrecondition  ':'  precondition=STRING) ? &
	//    (KeywordPostcondition ':'  postcondition=STRING)? &
	//    (KeywordPrimaryActor  ':'
	//        ((NotApplicable | None) | (primaryActor=PrimaryActor))) &
	//    (KeywordSecondaryActor ':'
	//        ((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)))? &
	//    (KeywordFacilitatorActor ':'
	//        ((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)))?);
	public ExceptionalUseCaseElements getExceptionalUseCaseAccess() {
		return pExceptionalUseCase;
	}
	
	public ParserRule getExceptionalUseCaseRule() {
		return getExceptionalUseCaseAccess().getRule();
	}
	
	//HandlerUseCase:
	//    KeywordHandlerUseCase ':'  name=ID
	//    ((KeywordScope        ':'  scope=ID)              &
	//    (KeywordIntention     ':'  intent=STRING)         &
	//    (KeywordLevel         ':'  level=Level)           &
	//    (KeywordMultiplicity  ':'  multiplicity=STRING) ? &
	//    (KeywordPrecondition  ':'  precondition=STRING) ? &
	//    (KeywordPostcondition ':'  postcondition=STRING)? &
	//    (KeywordPrimaryActor  ':'
	//        ((NotApplicable | None) | (primaryActor=PrimaryActor))) &
	//    (KeywordSecondaryActor ':'
	//        ((NotApplicable | None) | (secondaryActors+=SecondaryActor (',' secondaryActors+=SecondaryActor)*)))? &
	//    (KeywordFacilitatorActor ':'
	//        ((NotApplicable | None) | (facilitatorActors+=SecondaryActor (',' facilitatorActors+=SecondaryActor)*)))? &
	//    (KeywordHandlerClass ':'
	//        ((NotApplicable | None) | handlerClass=ID))? &
	//    (KeywordContextException ':'
	//        contextExceptions+=ContextExceptionMapping (',' contextExceptions+=ContextExceptionMapping)*));
	public HandlerUseCaseElements getHandlerUseCaseAccess() {
		return pHandlerUseCase;
	}
	
	public ParserRule getHandlerUseCaseRule() {
		return getHandlerUseCaseAccess().getRule();
	}
	
	///* Main Success Scenario Grammars */
	//MainScenario:
	//    (steps+=Step)+ outcome=OutcomeEnds;
	public MainScenarioElements getMainScenarioAccess() {
		return pMainScenario;
	}
	
	public ParserRule getMainScenarioRule() {
		return getMainScenarioAccess().getRule();
	}
	
	///* Extension Grammars */
	//Extensions:
	//    (blocks+=ExtensionBlock)+;
	public ExtensionsElements getExtensionsAccess() {
		return pExtensions;
	}
	
	public ParserRule getExtensionsRule() {
		return getExtensionsAccess().getRule();
	}
	
	//ExtensionBlock:
	//    (AlternateBlock | ExceptionalBlock);
	public ExtensionBlockElements getExtensionBlockAccess() {
		return pExtensionBlock;
	}
	
	public ParserRule getExtensionBlockRule() {
		return getExtensionBlockAccess().getRule();
	}
	
	//AlternateBlock:
	//    KeywordAlternateBlock 'for' (refStep=[Step|StepNumber] | (hasRangedRef?='(' refStep=[Step|StepNumber] '-' endRefStep=[Step|StepNumber] ')')) ':'
	//    (steps+=Step)+
	//    (outcome=Outcome | (KeywordChildListBegins ':' (blocks+=ExtensionBlock)+ KeywordChildListEnds));
	public AlternateBlockElements getAlternateBlockAccess() {
		return pAlternateBlock;
	}
	
	public ParserRule getAlternateBlockRule() {
		return getAlternateBlockAccess().getRule();
	}
	
	//ExceptionalBlock:
	//    KeywordExceptionalBlock 'for' (refStep=[Step|StepNumber] | (hasRangedRef?='(' refStep=[Step|StepNumber] '-' endRefStep=[Step|StepNumber] ')')) ':'
	//    (steps+=Step)+
	//    (outcome=Outcome | (KeywordChildListBegins ':' (blocks+=ExtensionBlock)+ KeywordChildListEnds));
	public ExceptionalBlockElements getExceptionalBlockAccess() {
		return pExceptionalBlock;
	}
	
	public ParserRule getExceptionalBlockRule() {
		return getExceptionalBlockAccess().getRule();
	}
	
	///* Outcome Grammars */
	//Outcome: (OutcomeEnds | OutcomeContinues);
	public OutcomeElements getOutcomeAccess() {
		return pOutcome;
	}
	
	public ParserRule getOutcomeRule() {
		return getOutcomeAccess().getRule();
	}
	
	//OutcomeEnds:
	//    (KeywordOutcomeEnds ':' type=OutcomeEndings);
	public OutcomeEndsElements getOutcomeEndsAccess() {
		return pOutcomeEnds;
	}
	
	public ParserRule getOutcomeEndsRule() {
		return getOutcomeEndsAccess().getRule();
	}
	
	//OutcomeContinues:
	//    (KeywordOutcomeCont ':' step=[Step|StepNumber]);
	public OutcomeContinuesElements getOutcomeContinuesAccess() {
		return pOutcomeContinues;
	}
	
	public ParserRule getOutcomeContinuesRule() {
		return getOutcomeContinuesAccess().getRule();
	}
	
	///* Step Grammars */
	//// TODO: separate ConditionControlStep into ConditionStep and ControlFlowStep rules.
	//// TODO: add grouped steps.
	//// - involves adding unique grammar elements to either type of step.
	//Step: (InteractionStep | InvocationStep | ConditionControlStep);
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//InteractionStep:
	//    stepNumber=StepNumber '.' (exception=Exception)?
	//    (description=STRING | ignoreDescription?=IGNORE_STRING);
	public InteractionStepElements getInteractionStepAccess() {
		return pInteractionStep;
	}
	
	public ParserRule getInteractionStepRule() {
		return getInteractionStepAccess().getRule();
	}
	
	//InvocationStep:
	//    stepNumber=StepNumber '.' '[' (invokedUseCase=[UseCase|ID]) ']'
	//    (description=STRING | ignoreDescription?=IGNORE_STRING);
	public InvocationStepElements getInvocationStepAccess() {
		return pInvocationStep;
	}
	
	public ParserRule getInvocationStepRule() {
		return getInvocationStepAccess().getRule();
	}
	
	//ConditionControlStep:
	//    (description=STRING | ignoreDescription?=IGNORE_STRING);
	public ConditionControlStepElements getConditionControlStepAccess() {
		return pConditionControlStep;
	}
	
	public ParserRule getConditionControlStepRule() {
		return getConditionControlStepAccess().getRule();
	}
	
	///* Step Number Grammars */
	//// TODO: evolve grammar to include other types of steps.
	//StepNumber: (MainStepNumber | ExtensionStepNumber);
	public StepNumberElements getStepNumberAccess() {
		return pStepNumber;
	}
	
	public ParserRule getStepNumberRule() {
		return getStepNumberAccess().getRule();
	}
	
	//GroupedSteps: '(' MainStepNumber '-' MainStepNumber ')';
	public GroupedStepsElements getGroupedStepsAccess() {
		return pGroupedSteps;
	}
	
	public ParserRule getGroupedStepsRule() {
		return getGroupedStepsAccess().getRule();
	}
	
	//MainStepNumber:
	//    INT ('.' INT)*;
	public MainStepNumberElements getMainStepNumberAccess() {
		return pMainStepNumber;
	}
	
	public ParserRule getMainStepNumberRule() {
		return getMainStepNumberAccess().getRule();
	}
	
	//ExtensionStepNumber:
	//    (MainStepNumber | GroupedSteps) ID
	//    ('.' INT ID?)*;
	public ExtensionStepNumberElements getExtensionStepNumberAccess() {
		return pExtensionStepNumber;
	}
	
	public ParserRule getExtensionStepNumberRule() {
		return getExtensionStepNumberAccess().getRule();
	}
	
	///* Exception Grammars */
	//Exception:
	//    (EnvironmentException | NetworkException | HardwareException | SoftwareException);
	public ExceptionElements getExceptionAccess() {
		return pException;
	}
	
	public ParserRule getExceptionRule() {
		return getExceptionAccess().getRule();
	}
	
	//EnvironmentException: '{' KeywordEnvironmentException '::' name=ID '}';
	public EnvironmentExceptionElements getEnvironmentExceptionAccess() {
		return pEnvironmentException;
	}
	
	public ParserRule getEnvironmentExceptionRule() {
		return getEnvironmentExceptionAccess().getRule();
	}
	
	//NetworkException:     '{' KeywordNetworkException     '::' name=ID '}';
	public NetworkExceptionElements getNetworkExceptionAccess() {
		return pNetworkException;
	}
	
	public ParserRule getNetworkExceptionRule() {
		return getNetworkExceptionAccess().getRule();
	}
	
	//HardwareException:    '{' KeywordHardwareException    '::' name=ID '}';
	public HardwareExceptionElements getHardwareExceptionAccess() {
		return pHardwareException;
	}
	
	public ParserRule getHardwareExceptionRule() {
		return getHardwareExceptionAccess().getRule();
	}
	
	//SoftwareException:    '{' KeywordSoftwareException    '::' name=ID '}';
	public SoftwareExceptionElements getSoftwareExceptionAccess() {
		return pSoftwareException;
	}
	
	public ParserRule getSoftwareExceptionRule() {
		return getSoftwareExceptionAccess().getRule();
	}
	
	///* Context and Exception Grammars */
	//ContextExceptionMapping:
	//    (context=[UseCase|ID] '{' KeywordException '::' exception=[Exception] '}');
	public ContextExceptionMappingElements getContextExceptionMappingAccess() {
		return pContextExceptionMapping;
	}
	
	public ParserRule getContextExceptionMappingRule() {
		return getContextExceptionMappingAccess().getRule();
	}
	
	///* Actor Grammars */
	//Actor: (PrimaryActor | SecondaryActor);
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//PrimaryActor:
	//    (HumanActor | SoftwareActor | name=ID);
	public PrimaryActorElements getPrimaryActorAccess() {
		return pPrimaryActor;
	}
	
	public ParserRule getPrimaryActorRule() {
		return getPrimaryActorAccess().getRule();
	}
	
	//SecondaryActor:
	//    (HumanActor | SoftwareActor | DeviceActor | PhysicalEntityActor | name=ID);
	public SecondaryActorElements getSecondaryActorAccess() {
		return pSecondaryActor;
	}
	
	public ParserRule getSecondaryActorRule() {
		return getSecondaryActorAccess().getRule();
	}
	
	//HumanActor:          'HUMAN'                                    '::' name=ID;
	public HumanActorElements getHumanActorAccess() {
		return pHumanActor;
	}
	
	public ParserRule getHumanActorRule() {
		return getHumanActorAccess().getRule();
	}
	
	//SoftwareActor:       'SOFTWARE'                                 '::' name=ID;
	public SoftwareActorElements getSoftwareActorAccess() {
		return pSoftwareActor;
	}
	
	public ParserRule getSoftwareActorRule() {
		return getSoftwareActorAccess().getRule();
	}
	
	//DeviceActor:         ('SENSOR' | 'ACTUATOR' | 'TAG' | 'READER') '::' name=ID;
	public DeviceActorElements getDeviceActorAccess() {
		return pDeviceActor;
	}
	
	public ParserRule getDeviceActorRule() {
		return getDeviceActorAccess().getRule();
	}
	
	//PhysicalEntityActor: 'PHYSICAL_ENTITY'                          '::' name=ID;
	public PhysicalEntityActorElements getPhysicalEntityActorAccess() {
		return pPhysicalEntityActor;
	}
	
	public ParserRule getPhysicalEntityActorRule() {
		return getPhysicalEntityActorAccess().getRule();
	}
	
	///* Keyword Grammars */
	//KeywordStandardMode:
	//    ('Standard' | 'standard')
	//    ('Mode' | 'mode');
	public KeywordStandardModeElements getKeywordStandardModeAccess() {
		return pKeywordStandardMode;
	}
	
	public ParserRule getKeywordStandardModeRule() {
		return getKeywordStandardModeAccess().getRule();
	}
	
	//KeywordExceptionalUseCase:
	//    ('Use' | 'use')
	//    ('Case' | 'case');
	public KeywordExceptionalUseCaseElements getKeywordExceptionalUseCaseAccess() {
		return pKeywordExceptionalUseCase;
	}
	
	public ParserRule getKeywordExceptionalUseCaseRule() {
		return getKeywordExceptionalUseCaseAccess().getRule();
	}
	
	//KeywordHandlerUseCase:
	//    ('Handler' | 'handler')
	//    ('Use' | 'use')
	//    ('Case' | 'case');
	public KeywordHandlerUseCaseElements getKeywordHandlerUseCaseAccess() {
		return pKeywordHandlerUseCase;
	}
	
	public ParserRule getKeywordHandlerUseCaseRule() {
		return getKeywordHandlerUseCaseAccess().getRule();
	}
	
	//KeywordScope:
	//    ('Scope' | 'scope');
	public KeywordScopeElements getKeywordScopeAccess() {
		return pKeywordScope;
	}
	
	public ParserRule getKeywordScopeRule() {
		return getKeywordScopeAccess().getRule();
	}
	
	//KeywordIntention:
	//    ('Intention' | 'intention');
	public KeywordIntentionElements getKeywordIntentionAccess() {
		return pKeywordIntention;
	}
	
	public ParserRule getKeywordIntentionRule() {
		return getKeywordIntentionAccess().getRule();
	}
	
	//KeywordLevel:
	//    ('Level' | 'level');
	public KeywordLevelElements getKeywordLevelAccess() {
		return pKeywordLevel;
	}
	
	public ParserRule getKeywordLevelRule() {
		return getKeywordLevelAccess().getRule();
	}
	
	//KeywordMultiplicity:
	//    ('Multiplicity' | 'multiplicity');
	public KeywordMultiplicityElements getKeywordMultiplicityAccess() {
		return pKeywordMultiplicity;
	}
	
	public ParserRule getKeywordMultiplicityRule() {
		return getKeywordMultiplicityAccess().getRule();
	}
	
	//KeywordPrecondition:
	//    ('Precondition'  | 'precondition');
	public KeywordPreconditionElements getKeywordPreconditionAccess() {
		return pKeywordPrecondition;
	}
	
	public ParserRule getKeywordPreconditionRule() {
		return getKeywordPreconditionAccess().getRule();
	}
	
	//KeywordPostcondition:
	//    ('Postcondition' | 'postcondition');
	public KeywordPostconditionElements getKeywordPostconditionAccess() {
		return pKeywordPostcondition;
	}
	
	public ParserRule getKeywordPostconditionRule() {
		return getKeywordPostconditionAccess().getRule();
	}
	
	//KeywordHandlerClass:
	//    ('Handler' | 'handler')
	//    ('Class' | 'class');
	public KeywordHandlerClassElements getKeywordHandlerClassAccess() {
		return pKeywordHandlerClass;
	}
	
	public ParserRule getKeywordHandlerClassRule() {
		return getKeywordHandlerClassAccess().getRule();
	}
	
	//KeywordContextException:
	//    ('Contexts' | 'contexts')
	//    ('And' | 'and')
	//    ('Exceptions' | 'exceptions');
	public KeywordContextExceptionElements getKeywordContextExceptionAccess() {
		return pKeywordContextException;
	}
	
	public ParserRule getKeywordContextExceptionRule() {
		return getKeywordContextExceptionAccess().getRule();
	}
	
	//KeywordMainSuccessScenario:
	//    ('Main' | 'main')
	//    ('Success' | 'success')?
	//    ('Scenario' | 'scenario')?;
	public KeywordMainSuccessScenarioElements getKeywordMainSuccessScenarioAccess() {
		return pKeywordMainSuccessScenario;
	}
	
	public ParserRule getKeywordMainSuccessScenarioRule() {
		return getKeywordMainSuccessScenarioAccess().getRule();
	}
	
	//KeywordExtensions:
	//    ('Extensions' | 'extensions');
	public KeywordExtensionsElements getKeywordExtensionsAccess() {
		return pKeywordExtensions;
	}
	
	public ParserRule getKeywordExtensionsRule() {
		return getKeywordExtensionsAccess().getRule();
	}
	
	//KeywordAlternateBlock:
	//    ('Alternative' | 'alternative');
	public KeywordAlternateBlockElements getKeywordAlternateBlockAccess() {
		return pKeywordAlternateBlock;
	}
	
	public ParserRule getKeywordAlternateBlockRule() {
		return getKeywordAlternateBlockAccess().getRule();
	}
	
	//KeywordExceptionalBlock:
	//    ('Exception' | 'exception');
	public KeywordExceptionalBlockElements getKeywordExceptionalBlockAccess() {
		return pKeywordExceptionalBlock;
	}
	
	public ParserRule getKeywordExceptionalBlockRule() {
		return getKeywordExceptionalBlockAccess().getRule();
	}
	
	//KeywordStepExceptionalBlock:
	//    ('Step' | 'step') ('-')
	//    ('Level' | 'level')
	//    ('Exception' | 'exception');
	public KeywordStepExceptionalBlockElements getKeywordStepExceptionalBlockAccess() {
		return pKeywordStepExceptionalBlock;
	}
	
	public ParserRule getKeywordStepExceptionalBlockRule() {
		return getKeywordStepExceptionalBlockAccess().getRule();
	}
	
	//KeywordSceneExceptionBlock:
	//    ('Scene' | 'scene') ('-')
	//    ('Level' | 'level')
	//    ('Exception' | 'exception');
	public KeywordSceneExceptionBlockElements getKeywordSceneExceptionBlockAccess() {
		return pKeywordSceneExceptionBlock;
	}
	
	public ParserRule getKeywordSceneExceptionBlockRule() {
		return getKeywordSceneExceptionBlockAccess().getRule();
	}
	
	//KeywordChildListBegins:
	//    ('Nested' | 'nested')
	//    ('Extensions' | 'extensions')
	//    ('Begin' | 'begin');
	public KeywordChildListBeginsElements getKeywordChildListBeginsAccess() {
		return pKeywordChildListBegins;
	}
	
	public ParserRule getKeywordChildListBeginsRule() {
		return getKeywordChildListBeginsAccess().getRule();
	}
	
	//KeywordChildListEnds:
	//    ('Nested' | 'nested')
	//    ('Extensions' | 'extensions')
	//    ('Ends' | 'ends');
	public KeywordChildListEndsElements getKeywordChildListEndsAccess() {
		return pKeywordChildListEnds;
	}
	
	public ParserRule getKeywordChildListEndsRule() {
		return getKeywordChildListEndsAccess().getRule();
	}
	
	//KeywordPrimaryActor:
	//    ('Primary' | 'primary')
	//    ('Actor' | 'actor');
	public KeywordPrimaryActorElements getKeywordPrimaryActorAccess() {
		return pKeywordPrimaryActor;
	}
	
	public ParserRule getKeywordPrimaryActorRule() {
		return getKeywordPrimaryActorAccess().getRule();
	}
	
	//KeywordSecondaryActor:
	//    ('Secondary' | 'secondary')
	//    ('Actor' | 'actor');
	public KeywordSecondaryActorElements getKeywordSecondaryActorAccess() {
		return pKeywordSecondaryActor;
	}
	
	public ParserRule getKeywordSecondaryActorRule() {
		return getKeywordSecondaryActorAccess().getRule();
	}
	
	//KeywordFacilitatorActor:
	//    ('Facilitator' | 'facilitator')
	//    ('Actor' | 'actor');
	public KeywordFacilitatorActorElements getKeywordFacilitatorActorAccess() {
		return pKeywordFacilitatorActor;
	}
	
	public ParserRule getKeywordFacilitatorActorRule() {
		return getKeywordFacilitatorActorAccess().getRule();
	}
	
	//KeywordException: (KeywordEnvironmentException | KeywordNetworkException | KeywordHardwareException | KeywordSoftwareException);
	public KeywordExceptionElements getKeywordExceptionAccess() {
		return pKeywordException;
	}
	
	public ParserRule getKeywordExceptionRule() {
		return getKeywordExceptionAccess().getRule();
	}
	
	//KeywordEnvironmentException: 'ENVIRONMENT_EXCEPTION';
	public KeywordEnvironmentExceptionElements getKeywordEnvironmentExceptionAccess() {
		return pKeywordEnvironmentException;
	}
	
	public ParserRule getKeywordEnvironmentExceptionRule() {
		return getKeywordEnvironmentExceptionAccess().getRule();
	}
	
	//KeywordNetworkException:     'NETWORK_EXCEPTION';
	public KeywordNetworkExceptionElements getKeywordNetworkExceptionAccess() {
		return pKeywordNetworkException;
	}
	
	public ParserRule getKeywordNetworkExceptionRule() {
		return getKeywordNetworkExceptionAccess().getRule();
	}
	
	//KeywordHardwareException:    'HARDWARE_EXCEPTION';
	public KeywordHardwareExceptionElements getKeywordHardwareExceptionAccess() {
		return pKeywordHardwareException;
	}
	
	public ParserRule getKeywordHardwareExceptionRule() {
		return getKeywordHardwareExceptionAccess().getRule();
	}
	
	//KeywordSoftwareException:    'SOFTWARE_EXCEPTION';
	public KeywordSoftwareExceptionElements getKeywordSoftwareExceptionAccess() {
		return pKeywordSoftwareException;
	}
	
	public ParserRule getKeywordSoftwareExceptionRule() {
		return getKeywordSoftwareExceptionAccess().getRule();
	}
	
	//KeywordOutcomeEnds:
	//    ('Use' | 'use')
	//    ('Case' | 'case')
	//    ('Ends' | 'ends')
	//    ('In' | 'in');
	public KeywordOutcomeEndsElements getKeywordOutcomeEndsAccess() {
		return pKeywordOutcomeEnds;
	}
	
	public ParserRule getKeywordOutcomeEndsRule() {
		return getKeywordOutcomeEndsAccess().getRule();
	}
	
	//KeywordOutcomeCont:
	//    ('Use' | 'use')
	//    ('Case' | 'case')
	//    ('Continues' | 'continues')
	//    ('At' | 'at')
	//    ('Step' | 'step');
	public KeywordOutcomeContElements getKeywordOutcomeContAccess() {
		return pKeywordOutcomeCont;
	}
	
	public ParserRule getKeywordOutcomeContRule() {
		return getKeywordOutcomeContAccess().getRule();
	}
	
	///* Enumerable values */
	//enum Level:
	//    SUMMARY='SUMMARY' | USER_GOAL='USER_GOAL' | SUBFUNCTION='SUB_FUNCTION';
	public LevelElements getLevelAccess() {
		return eLevel;
	}
	
	public EnumRule getLevelRule() {
		return getLevelAccess().getRule();
	}
	
	//enum OutcomeEndings:
	//    SUCCESS='SUCCESS' | FAILURE='FAILURE' | DEGRADED='DEGRADED' | ABANDONED='ABANDONED';
	public OutcomeEndingsElements getOutcomeEndingsAccess() {
		return eOutcomeEndings;
	}
	
	public EnumRule getOutcomeEndingsRule() {
		return getOutcomeEndingsAccess().getRule();
	}
	
	///* Terminal Elements */
	//terminal IGNORE_STRING:
	//    '#' -> '#';
	public TerminalRule getIGNORE_STRINGRule() {
		return tIGNORE_STRING;
	}
	
	///* Common Grammar Elements */
	//None: 'None' | 'none';
	public NoneElements getNoneAccess() {
		return pNone;
	}
	
	public ParserRule getNoneRule() {
		return getNoneAccess().getRule();
	}
	
	//NotApplicable: 'N/A' | 'n/a';
	public NotApplicableElements getNotApplicableAccess() {
		return pNotApplicable;
	}
	
	public ParserRule getNotApplicableRule() {
		return getNotApplicableAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
