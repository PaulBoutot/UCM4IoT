/**
 * generated by Xtext 2.25.0
 */
package mde.iot.ucm4iot.ucm4iot.util;

import mde.iot.ucm4iot.ucm4iot.Actor;
import mde.iot.ucm4iot.ucm4iot.AlternateBlock;
import mde.iot.ucm4iot.ucm4iot.ConditionControlStep;
import mde.iot.ucm4iot.ucm4iot.ContextExceptionMapping;
import mde.iot.ucm4iot.ucm4iot.DeviceActor;
import mde.iot.ucm4iot.ucm4iot.EnvironmentException;
import mde.iot.ucm4iot.ucm4iot.ExceptionalBlock;
import mde.iot.ucm4iot.ucm4iot.ExceptionalUseCase;
import mde.iot.ucm4iot.ucm4iot.ExtensionBlock;
import mde.iot.ucm4iot.ucm4iot.Extensions;
import mde.iot.ucm4iot.ucm4iot.HandlerUseCase;
import mde.iot.ucm4iot.ucm4iot.HardwareException;
import mde.iot.ucm4iot.ucm4iot.HumanActor;
import mde.iot.ucm4iot.ucm4iot.InteractionStep;
import mde.iot.ucm4iot.ucm4iot.InvocationStep;
import mde.iot.ucm4iot.ucm4iot.IoTUseCaseModel;
import mde.iot.ucm4iot.ucm4iot.MainScenario;
import mde.iot.ucm4iot.ucm4iot.NetworkException;
import mde.iot.ucm4iot.ucm4iot.Outcome;
import mde.iot.ucm4iot.ucm4iot.OutcomeContinues;
import mde.iot.ucm4iot.ucm4iot.OutcomeEnds;
import mde.iot.ucm4iot.ucm4iot.PhysicalEntityActor;
import mde.iot.ucm4iot.ucm4iot.PrimaryActor;
import mde.iot.ucm4iot.ucm4iot.SecondaryActor;
import mde.iot.ucm4iot.ucm4iot.SoftwareActor;
import mde.iot.ucm4iot.ucm4iot.SoftwareException;
import mde.iot.ucm4iot.ucm4iot.Step;
import mde.iot.ucm4iot.ucm4iot.Ucm4iotPackage;
import mde.iot.ucm4iot.ucm4iot.UseCase;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see mde.iot.ucm4iot.ucm4iot.Ucm4iotPackage
 * @generated
 */
public class Ucm4iotAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static Ucm4iotPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ucm4iotAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = Ucm4iotPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Ucm4iotSwitch<Adapter> modelSwitch =
    new Ucm4iotSwitch<Adapter>()
    {
      @Override
      public Adapter caseIoTUseCaseModel(IoTUseCaseModel object)
      {
        return createIoTUseCaseModelAdapter();
      }
      @Override
      public Adapter caseUseCase(UseCase object)
      {
        return createUseCaseAdapter();
      }
      @Override
      public Adapter caseExceptionalUseCase(ExceptionalUseCase object)
      {
        return createExceptionalUseCaseAdapter();
      }
      @Override
      public Adapter caseHandlerUseCase(HandlerUseCase object)
      {
        return createHandlerUseCaseAdapter();
      }
      @Override
      public Adapter caseMainScenario(MainScenario object)
      {
        return createMainScenarioAdapter();
      }
      @Override
      public Adapter caseExtensions(Extensions object)
      {
        return createExtensionsAdapter();
      }
      @Override
      public Adapter caseExtensionBlock(ExtensionBlock object)
      {
        return createExtensionBlockAdapter();
      }
      @Override
      public Adapter caseAlternateBlock(AlternateBlock object)
      {
        return createAlternateBlockAdapter();
      }
      @Override
      public Adapter caseExceptionalBlock(ExceptionalBlock object)
      {
        return createExceptionalBlockAdapter();
      }
      @Override
      public Adapter caseOutcome(Outcome object)
      {
        return createOutcomeAdapter();
      }
      @Override
      public Adapter caseOutcomeEnds(OutcomeEnds object)
      {
        return createOutcomeEndsAdapter();
      }
      @Override
      public Adapter caseOutcomeContinues(OutcomeContinues object)
      {
        return createOutcomeContinuesAdapter();
      }
      @Override
      public Adapter caseStep(Step object)
      {
        return createStepAdapter();
      }
      @Override
      public Adapter caseInteractionStep(InteractionStep object)
      {
        return createInteractionStepAdapter();
      }
      @Override
      public Adapter caseInvocationStep(InvocationStep object)
      {
        return createInvocationStepAdapter();
      }
      @Override
      public Adapter caseConditionControlStep(ConditionControlStep object)
      {
        return createConditionControlStepAdapter();
      }
      @Override
      public Adapter caseException(mde.iot.ucm4iot.ucm4iot.Exception object)
      {
        return createExceptionAdapter();
      }
      @Override
      public Adapter caseEnvironmentException(EnvironmentException object)
      {
        return createEnvironmentExceptionAdapter();
      }
      @Override
      public Adapter caseNetworkException(NetworkException object)
      {
        return createNetworkExceptionAdapter();
      }
      @Override
      public Adapter caseHardwareException(HardwareException object)
      {
        return createHardwareExceptionAdapter();
      }
      @Override
      public Adapter caseSoftwareException(SoftwareException object)
      {
        return createSoftwareExceptionAdapter();
      }
      @Override
      public Adapter caseContextExceptionMapping(ContextExceptionMapping object)
      {
        return createContextExceptionMappingAdapter();
      }
      @Override
      public Adapter caseActor(Actor object)
      {
        return createActorAdapter();
      }
      @Override
      public Adapter casePrimaryActor(PrimaryActor object)
      {
        return createPrimaryActorAdapter();
      }
      @Override
      public Adapter caseSecondaryActor(SecondaryActor object)
      {
        return createSecondaryActorAdapter();
      }
      @Override
      public Adapter caseHumanActor(HumanActor object)
      {
        return createHumanActorAdapter();
      }
      @Override
      public Adapter caseSoftwareActor(SoftwareActor object)
      {
        return createSoftwareActorAdapter();
      }
      @Override
      public Adapter caseDeviceActor(DeviceActor object)
      {
        return createDeviceActorAdapter();
      }
      @Override
      public Adapter casePhysicalEntityActor(PhysicalEntityActor object)
      {
        return createPhysicalEntityActorAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.IoTUseCaseModel <em>Io TUse Case Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.IoTUseCaseModel
   * @generated
   */
  public Adapter createIoTUseCaseModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.UseCase <em>Use Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.UseCase
   * @generated
   */
  public Adapter createUseCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.ExceptionalUseCase <em>Exceptional Use Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.ExceptionalUseCase
   * @generated
   */
  public Adapter createExceptionalUseCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.HandlerUseCase <em>Handler Use Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.HandlerUseCase
   * @generated
   */
  public Adapter createHandlerUseCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.MainScenario <em>Main Scenario</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.MainScenario
   * @generated
   */
  public Adapter createMainScenarioAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.Extensions <em>Extensions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.Extensions
   * @generated
   */
  public Adapter createExtensionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.ExtensionBlock <em>Extension Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.ExtensionBlock
   * @generated
   */
  public Adapter createExtensionBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.AlternateBlock <em>Alternate Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.AlternateBlock
   * @generated
   */
  public Adapter createAlternateBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.ExceptionalBlock <em>Exceptional Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.ExceptionalBlock
   * @generated
   */
  public Adapter createExceptionalBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.Outcome <em>Outcome</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.Outcome
   * @generated
   */
  public Adapter createOutcomeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.OutcomeEnds <em>Outcome Ends</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.OutcomeEnds
   * @generated
   */
  public Adapter createOutcomeEndsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.OutcomeContinues <em>Outcome Continues</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.OutcomeContinues
   * @generated
   */
  public Adapter createOutcomeContinuesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.Step <em>Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.Step
   * @generated
   */
  public Adapter createStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.InteractionStep <em>Interaction Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.InteractionStep
   * @generated
   */
  public Adapter createInteractionStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.InvocationStep <em>Invocation Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.InvocationStep
   * @generated
   */
  public Adapter createInvocationStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.ConditionControlStep <em>Condition Control Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.ConditionControlStep
   * @generated
   */
  public Adapter createConditionControlStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.Exception <em>Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.Exception
   * @generated
   */
  public Adapter createExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.EnvironmentException <em>Environment Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.EnvironmentException
   * @generated
   */
  public Adapter createEnvironmentExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.NetworkException <em>Network Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.NetworkException
   * @generated
   */
  public Adapter createNetworkExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.HardwareException <em>Hardware Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.HardwareException
   * @generated
   */
  public Adapter createHardwareExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.SoftwareException <em>Software Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.SoftwareException
   * @generated
   */
  public Adapter createSoftwareExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.ContextExceptionMapping <em>Context Exception Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.ContextExceptionMapping
   * @generated
   */
  public Adapter createContextExceptionMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.Actor <em>Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.Actor
   * @generated
   */
  public Adapter createActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.PrimaryActor <em>Primary Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.PrimaryActor
   * @generated
   */
  public Adapter createPrimaryActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.SecondaryActor <em>Secondary Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.SecondaryActor
   * @generated
   */
  public Adapter createSecondaryActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.HumanActor <em>Human Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.HumanActor
   * @generated
   */
  public Adapter createHumanActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.SoftwareActor <em>Software Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.SoftwareActor
   * @generated
   */
  public Adapter createSoftwareActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.DeviceActor <em>Device Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.DeviceActor
   * @generated
   */
  public Adapter createDeviceActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mde.iot.ucm4iot.ucm4iot.PhysicalEntityActor <em>Physical Entity Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mde.iot.ucm4iot.ucm4iot.PhysicalEntityActor
   * @generated
   */
  public Adapter createPhysicalEntityActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //Ucm4iotAdapterFactory
