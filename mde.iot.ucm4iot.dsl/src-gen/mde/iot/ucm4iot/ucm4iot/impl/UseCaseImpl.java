/**
 * generated by Xtext 2.25.0
 */
package mde.iot.ucm4iot.ucm4iot.impl;

import java.util.Collection;

import mde.iot.ucm4iot.ucm4iot.Extensions;
import mde.iot.ucm4iot.ucm4iot.Level;
import mde.iot.ucm4iot.ucm4iot.MainScenario;
import mde.iot.ucm4iot.ucm4iot.PrimaryActor;
import mde.iot.ucm4iot.ucm4iot.SecondaryActor;
import mde.iot.ucm4iot.ucm4iot.Ucm4iotPackage;
import mde.iot.ucm4iot.ucm4iot.UseCase;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Use Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getMain <em>Main</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getExtensions <em>Extensions</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getName <em>Name</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getScope <em>Scope</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getIntent <em>Intent</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getLevel <em>Level</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getMultiplicity <em>Multiplicity</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getPrecondition <em>Precondition</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getPostcondition <em>Postcondition</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getPrimaryActor <em>Primary Actor</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getSecondaryActors <em>Secondary Actors</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.UseCaseImpl#getFacilitatorActors <em>Facilitator Actors</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UseCaseImpl extends MinimalEObjectImpl.Container implements UseCase
{
  /**
   * The cached value of the '{@link #getMain() <em>Main</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMain()
   * @generated
   * @ordered
   */
  protected MainScenario main;

  /**
   * The cached value of the '{@link #getExtensions() <em>Extensions</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtensions()
   * @generated
   * @ordered
   */
  protected Extensions extensions;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getScope() <em>Scope</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScope()
   * @generated
   * @ordered
   */
  protected static final String SCOPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getScope() <em>Scope</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScope()
   * @generated
   * @ordered
   */
  protected String scope = SCOPE_EDEFAULT;

  /**
   * The default value of the '{@link #getIntent() <em>Intent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIntent()
   * @generated
   * @ordered
   */
  protected static final String INTENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIntent() <em>Intent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIntent()
   * @generated
   * @ordered
   */
  protected String intent = INTENT_EDEFAULT;

  /**
   * The default value of the '{@link #getLevel() <em>Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLevel()
   * @generated
   * @ordered
   */
  protected static final Level LEVEL_EDEFAULT = Level.SUMMARY;

  /**
   * The cached value of the '{@link #getLevel() <em>Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLevel()
   * @generated
   * @ordered
   */
  protected Level level = LEVEL_EDEFAULT;

  /**
   * The default value of the '{@link #getMultiplicity() <em>Multiplicity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplicity()
   * @generated
   * @ordered
   */
  protected static final String MULTIPLICITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMultiplicity() <em>Multiplicity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplicity()
   * @generated
   * @ordered
   */
  protected String multiplicity = MULTIPLICITY_EDEFAULT;

  /**
   * The default value of the '{@link #getPrecondition() <em>Precondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecondition()
   * @generated
   * @ordered
   */
  protected static final String PRECONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPrecondition() <em>Precondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecondition()
   * @generated
   * @ordered
   */
  protected String precondition = PRECONDITION_EDEFAULT;

  /**
   * The default value of the '{@link #getPostcondition() <em>Postcondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostcondition()
   * @generated
   * @ordered
   */
  protected static final String POSTCONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPostcondition() <em>Postcondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostcondition()
   * @generated
   * @ordered
   */
  protected String postcondition = POSTCONDITION_EDEFAULT;

  /**
   * The cached value of the '{@link #getPrimaryActor() <em>Primary Actor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimaryActor()
   * @generated
   * @ordered
   */
  protected PrimaryActor primaryActor;

  /**
   * The cached value of the '{@link #getSecondaryActors() <em>Secondary Actors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecondaryActors()
   * @generated
   * @ordered
   */
  protected EList<SecondaryActor> secondaryActors;

  /**
   * The cached value of the '{@link #getFacilitatorActors() <em>Facilitator Actors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFacilitatorActors()
   * @generated
   * @ordered
   */
  protected EList<SecondaryActor> facilitatorActors;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UseCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Ucm4iotPackage.Literals.USE_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainScenario getMain()
  {
    return main;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMain(MainScenario newMain, NotificationChain msgs)
  {
    MainScenario oldMain = main;
    main = newMain;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__MAIN, oldMain, newMain);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMain(MainScenario newMain)
  {
    if (newMain != main)
    {
      NotificationChain msgs = null;
      if (main != null)
        msgs = ((InternalEObject)main).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ucm4iotPackage.USE_CASE__MAIN, null, msgs);
      if (newMain != null)
        msgs = ((InternalEObject)newMain).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ucm4iotPackage.USE_CASE__MAIN, null, msgs);
      msgs = basicSetMain(newMain, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__MAIN, newMain, newMain));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Extensions getExtensions()
  {
    return extensions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExtensions(Extensions newExtensions, NotificationChain msgs)
  {
    Extensions oldExtensions = extensions;
    extensions = newExtensions;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__EXTENSIONS, oldExtensions, newExtensions);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExtensions(Extensions newExtensions)
  {
    if (newExtensions != extensions)
    {
      NotificationChain msgs = null;
      if (extensions != null)
        msgs = ((InternalEObject)extensions).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ucm4iotPackage.USE_CASE__EXTENSIONS, null, msgs);
      if (newExtensions != null)
        msgs = ((InternalEObject)newExtensions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ucm4iotPackage.USE_CASE__EXTENSIONS, null, msgs);
      msgs = basicSetExtensions(newExtensions, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__EXTENSIONS, newExtensions, newExtensions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getScope()
  {
    return scope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScope(String newScope)
  {
    String oldScope = scope;
    scope = newScope;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__SCOPE, oldScope, scope));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIntent()
  {
    return intent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIntent(String newIntent)
  {
    String oldIntent = intent;
    intent = newIntent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__INTENT, oldIntent, intent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Level getLevel()
  {
    return level;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLevel(Level newLevel)
  {
    Level oldLevel = level;
    level = newLevel == null ? LEVEL_EDEFAULT : newLevel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__LEVEL, oldLevel, level));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMultiplicity()
  {
    return multiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMultiplicity(String newMultiplicity)
  {
    String oldMultiplicity = multiplicity;
    multiplicity = newMultiplicity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__MULTIPLICITY, oldMultiplicity, multiplicity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPrecondition()
  {
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrecondition(String newPrecondition)
  {
    String oldPrecondition = precondition;
    precondition = newPrecondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__PRECONDITION, oldPrecondition, precondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPostcondition()
  {
    return postcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPostcondition(String newPostcondition)
  {
    String oldPostcondition = postcondition;
    postcondition = newPostcondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__POSTCONDITION, oldPostcondition, postcondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryActor getPrimaryActor()
  {
    return primaryActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrimaryActor(PrimaryActor newPrimaryActor, NotificationChain msgs)
  {
    PrimaryActor oldPrimaryActor = primaryActor;
    primaryActor = newPrimaryActor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__PRIMARY_ACTOR, oldPrimaryActor, newPrimaryActor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrimaryActor(PrimaryActor newPrimaryActor)
  {
    if (newPrimaryActor != primaryActor)
    {
      NotificationChain msgs = null;
      if (primaryActor != null)
        msgs = ((InternalEObject)primaryActor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ucm4iotPackage.USE_CASE__PRIMARY_ACTOR, null, msgs);
      if (newPrimaryActor != null)
        msgs = ((InternalEObject)newPrimaryActor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ucm4iotPackage.USE_CASE__PRIMARY_ACTOR, null, msgs);
      msgs = basicSetPrimaryActor(newPrimaryActor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.USE_CASE__PRIMARY_ACTOR, newPrimaryActor, newPrimaryActor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SecondaryActor> getSecondaryActors()
  {
    if (secondaryActors == null)
    {
      secondaryActors = new EObjectContainmentEList<SecondaryActor>(SecondaryActor.class, this, Ucm4iotPackage.USE_CASE__SECONDARY_ACTORS);
    }
    return secondaryActors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SecondaryActor> getFacilitatorActors()
  {
    if (facilitatorActors == null)
    {
      facilitatorActors = new EObjectContainmentEList<SecondaryActor>(SecondaryActor.class, this, Ucm4iotPackage.USE_CASE__FACILITATOR_ACTORS);
    }
    return facilitatorActors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.USE_CASE__MAIN:
        return basicSetMain(null, msgs);
      case Ucm4iotPackage.USE_CASE__EXTENSIONS:
        return basicSetExtensions(null, msgs);
      case Ucm4iotPackage.USE_CASE__PRIMARY_ACTOR:
        return basicSetPrimaryActor(null, msgs);
      case Ucm4iotPackage.USE_CASE__SECONDARY_ACTORS:
        return ((InternalEList<?>)getSecondaryActors()).basicRemove(otherEnd, msgs);
      case Ucm4iotPackage.USE_CASE__FACILITATOR_ACTORS:
        return ((InternalEList<?>)getFacilitatorActors()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.USE_CASE__MAIN:
        return getMain();
      case Ucm4iotPackage.USE_CASE__EXTENSIONS:
        return getExtensions();
      case Ucm4iotPackage.USE_CASE__NAME:
        return getName();
      case Ucm4iotPackage.USE_CASE__SCOPE:
        return getScope();
      case Ucm4iotPackage.USE_CASE__INTENT:
        return getIntent();
      case Ucm4iotPackage.USE_CASE__LEVEL:
        return getLevel();
      case Ucm4iotPackage.USE_CASE__MULTIPLICITY:
        return getMultiplicity();
      case Ucm4iotPackage.USE_CASE__PRECONDITION:
        return getPrecondition();
      case Ucm4iotPackage.USE_CASE__POSTCONDITION:
        return getPostcondition();
      case Ucm4iotPackage.USE_CASE__PRIMARY_ACTOR:
        return getPrimaryActor();
      case Ucm4iotPackage.USE_CASE__SECONDARY_ACTORS:
        return getSecondaryActors();
      case Ucm4iotPackage.USE_CASE__FACILITATOR_ACTORS:
        return getFacilitatorActors();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.USE_CASE__MAIN:
        setMain((MainScenario)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__EXTENSIONS:
        setExtensions((Extensions)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__NAME:
        setName((String)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__SCOPE:
        setScope((String)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__INTENT:
        setIntent((String)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__LEVEL:
        setLevel((Level)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__MULTIPLICITY:
        setMultiplicity((String)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__PRECONDITION:
        setPrecondition((String)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__POSTCONDITION:
        setPostcondition((String)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__PRIMARY_ACTOR:
        setPrimaryActor((PrimaryActor)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__SECONDARY_ACTORS:
        getSecondaryActors().clear();
        getSecondaryActors().addAll((Collection<? extends SecondaryActor>)newValue);
        return;
      case Ucm4iotPackage.USE_CASE__FACILITATOR_ACTORS:
        getFacilitatorActors().clear();
        getFacilitatorActors().addAll((Collection<? extends SecondaryActor>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.USE_CASE__MAIN:
        setMain((MainScenario)null);
        return;
      case Ucm4iotPackage.USE_CASE__EXTENSIONS:
        setExtensions((Extensions)null);
        return;
      case Ucm4iotPackage.USE_CASE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case Ucm4iotPackage.USE_CASE__SCOPE:
        setScope(SCOPE_EDEFAULT);
        return;
      case Ucm4iotPackage.USE_CASE__INTENT:
        setIntent(INTENT_EDEFAULT);
        return;
      case Ucm4iotPackage.USE_CASE__LEVEL:
        setLevel(LEVEL_EDEFAULT);
        return;
      case Ucm4iotPackage.USE_CASE__MULTIPLICITY:
        setMultiplicity(MULTIPLICITY_EDEFAULT);
        return;
      case Ucm4iotPackage.USE_CASE__PRECONDITION:
        setPrecondition(PRECONDITION_EDEFAULT);
        return;
      case Ucm4iotPackage.USE_CASE__POSTCONDITION:
        setPostcondition(POSTCONDITION_EDEFAULT);
        return;
      case Ucm4iotPackage.USE_CASE__PRIMARY_ACTOR:
        setPrimaryActor((PrimaryActor)null);
        return;
      case Ucm4iotPackage.USE_CASE__SECONDARY_ACTORS:
        getSecondaryActors().clear();
        return;
      case Ucm4iotPackage.USE_CASE__FACILITATOR_ACTORS:
        getFacilitatorActors().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.USE_CASE__MAIN:
        return main != null;
      case Ucm4iotPackage.USE_CASE__EXTENSIONS:
        return extensions != null;
      case Ucm4iotPackage.USE_CASE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case Ucm4iotPackage.USE_CASE__SCOPE:
        return SCOPE_EDEFAULT == null ? scope != null : !SCOPE_EDEFAULT.equals(scope);
      case Ucm4iotPackage.USE_CASE__INTENT:
        return INTENT_EDEFAULT == null ? intent != null : !INTENT_EDEFAULT.equals(intent);
      case Ucm4iotPackage.USE_CASE__LEVEL:
        return level != LEVEL_EDEFAULT;
      case Ucm4iotPackage.USE_CASE__MULTIPLICITY:
        return MULTIPLICITY_EDEFAULT == null ? multiplicity != null : !MULTIPLICITY_EDEFAULT.equals(multiplicity);
      case Ucm4iotPackage.USE_CASE__PRECONDITION:
        return PRECONDITION_EDEFAULT == null ? precondition != null : !PRECONDITION_EDEFAULT.equals(precondition);
      case Ucm4iotPackage.USE_CASE__POSTCONDITION:
        return POSTCONDITION_EDEFAULT == null ? postcondition != null : !POSTCONDITION_EDEFAULT.equals(postcondition);
      case Ucm4iotPackage.USE_CASE__PRIMARY_ACTOR:
        return primaryActor != null;
      case Ucm4iotPackage.USE_CASE__SECONDARY_ACTORS:
        return secondaryActors != null && !secondaryActors.isEmpty();
      case Ucm4iotPackage.USE_CASE__FACILITATOR_ACTORS:
        return facilitatorActors != null && !facilitatorActors.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", scope: ");
    result.append(scope);
    result.append(", intent: ");
    result.append(intent);
    result.append(", level: ");
    result.append(level);
    result.append(", multiplicity: ");
    result.append(multiplicity);
    result.append(", precondition: ");
    result.append(precondition);
    result.append(", postcondition: ");
    result.append(postcondition);
    result.append(')');
    return result.toString();
  }

} //UseCaseImpl
