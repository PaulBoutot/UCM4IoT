/**
 * generated by Xtext 2.25.0
 */
package mde.iot.ucm4iot.ucm4iot.impl;

import mde.iot.ucm4iot.ucm4iot.ContextExceptionMapping;
import mde.iot.ucm4iot.ucm4iot.Ucm4iotPackage;
import mde.iot.ucm4iot.ucm4iot.UseCase;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Context Exception Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.ContextExceptionMappingImpl#getContext <em>Context</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.ContextExceptionMappingImpl#getException <em>Exception</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContextExceptionMappingImpl extends MinimalEObjectImpl.Container implements ContextExceptionMapping
{
  /**
   * The cached value of the '{@link #getContext() <em>Context</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContext()
   * @generated
   * @ordered
   */
  protected UseCase context;

  /**
   * The cached value of the '{@link #getException() <em>Exception</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getException()
   * @generated
   * @ordered
   */
  protected mde.iot.ucm4iot.ucm4iot.Exception exception;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextExceptionMappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Ucm4iotPackage.Literals.CONTEXT_EXCEPTION_MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UseCase getContext()
  {
    if (context != null && context.eIsProxy())
    {
      InternalEObject oldContext = (InternalEObject)context;
      context = (UseCase)eResolveProxy(oldContext);
      if (context != oldContext)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__CONTEXT, oldContext, context));
      }
    }
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseCase basicGetContext()
  {
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContext(UseCase newContext)
  {
    UseCase oldContext = context;
    context = newContext;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__CONTEXT, oldContext, context));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public mde.iot.ucm4iot.ucm4iot.Exception getException()
  {
    if (exception != null && exception.eIsProxy())
    {
      InternalEObject oldException = (InternalEObject)exception;
      exception = (mde.iot.ucm4iot.ucm4iot.Exception)eResolveProxy(oldException);
      if (exception != oldException)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__EXCEPTION, oldException, exception));
      }
    }
    return exception;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public mde.iot.ucm4iot.ucm4iot.Exception basicGetException()
  {
    return exception;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setException(mde.iot.ucm4iot.ucm4iot.Exception newException)
  {
    mde.iot.ucm4iot.ucm4iot.Exception oldException = exception;
    exception = newException;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__EXCEPTION, oldException, exception));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__CONTEXT:
        if (resolve) return getContext();
        return basicGetContext();
      case Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__EXCEPTION:
        if (resolve) return getException();
        return basicGetException();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__CONTEXT:
        setContext((UseCase)newValue);
        return;
      case Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__EXCEPTION:
        setException((mde.iot.ucm4iot.ucm4iot.Exception)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__CONTEXT:
        setContext((UseCase)null);
        return;
      case Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__EXCEPTION:
        setException((mde.iot.ucm4iot.ucm4iot.Exception)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__CONTEXT:
        return context != null;
      case Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING__EXCEPTION:
        return exception != null;
    }
    return super.eIsSet(featureID);
  }

} //ContextExceptionMappingImpl
