/**
 * generated by Xtext 2.25.0
 */
package mde.iot.ucm4iot.ucm4iot.impl;

import java.util.Collection;

import mde.iot.ucm4iot.ucm4iot.ContextExceptionMapping;
import mde.iot.ucm4iot.ucm4iot.HandlerUseCase;
import mde.iot.ucm4iot.ucm4iot.Ucm4iotPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Handler Use Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.HandlerUseCaseImpl#getHandlerClass <em>Handler Class</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.HandlerUseCaseImpl#getContextExceptions <em>Context Exceptions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HandlerUseCaseImpl extends UseCaseImpl implements HandlerUseCase
{
  /**
   * The default value of the '{@link #getHandlerClass() <em>Handler Class</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHandlerClass()
   * @generated
   * @ordered
   */
  protected static final String HANDLER_CLASS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHandlerClass() <em>Handler Class</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHandlerClass()
   * @generated
   * @ordered
   */
  protected String handlerClass = HANDLER_CLASS_EDEFAULT;

  /**
   * The cached value of the '{@link #getContextExceptions() <em>Context Exceptions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContextExceptions()
   * @generated
   * @ordered
   */
  protected EList<ContextExceptionMapping> contextExceptions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HandlerUseCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Ucm4iotPackage.Literals.HANDLER_USE_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHandlerClass()
  {
    return handlerClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHandlerClass(String newHandlerClass)
  {
    String oldHandlerClass = handlerClass;
    handlerClass = newHandlerClass;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.HANDLER_USE_CASE__HANDLER_CLASS, oldHandlerClass, handlerClass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ContextExceptionMapping> getContextExceptions()
  {
    if (contextExceptions == null)
    {
      contextExceptions = new EObjectContainmentEList<ContextExceptionMapping>(ContextExceptionMapping.class, this, Ucm4iotPackage.HANDLER_USE_CASE__CONTEXT_EXCEPTIONS);
    }
    return contextExceptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.HANDLER_USE_CASE__CONTEXT_EXCEPTIONS:
        return ((InternalEList<?>)getContextExceptions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.HANDLER_USE_CASE__HANDLER_CLASS:
        return getHandlerClass();
      case Ucm4iotPackage.HANDLER_USE_CASE__CONTEXT_EXCEPTIONS:
        return getContextExceptions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.HANDLER_USE_CASE__HANDLER_CLASS:
        setHandlerClass((String)newValue);
        return;
      case Ucm4iotPackage.HANDLER_USE_CASE__CONTEXT_EXCEPTIONS:
        getContextExceptions().clear();
        getContextExceptions().addAll((Collection<? extends ContextExceptionMapping>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.HANDLER_USE_CASE__HANDLER_CLASS:
        setHandlerClass(HANDLER_CLASS_EDEFAULT);
        return;
      case Ucm4iotPackage.HANDLER_USE_CASE__CONTEXT_EXCEPTIONS:
        getContextExceptions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.HANDLER_USE_CASE__HANDLER_CLASS:
        return HANDLER_CLASS_EDEFAULT == null ? handlerClass != null : !HANDLER_CLASS_EDEFAULT.equals(handlerClass);
      case Ucm4iotPackage.HANDLER_USE_CASE__CONTEXT_EXCEPTIONS:
        return contextExceptions != null && !contextExceptions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (handlerClass: ");
    result.append(handlerClass);
    result.append(')');
    return result.toString();
  }

} //HandlerUseCaseImpl
