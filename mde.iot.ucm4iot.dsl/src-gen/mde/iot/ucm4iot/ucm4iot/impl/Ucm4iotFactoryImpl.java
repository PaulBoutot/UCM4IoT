/**
 * generated by Xtext 2.25.0
 */
package mde.iot.ucm4iot.ucm4iot.impl;

import mde.iot.ucm4iot.ucm4iot.Actor;
import mde.iot.ucm4iot.ucm4iot.AlternateBlock;
import mde.iot.ucm4iot.ucm4iot.ConditionControlStep;
import mde.iot.ucm4iot.ucm4iot.ContextExceptionMapping;
import mde.iot.ucm4iot.ucm4iot.DeviceActor;
import mde.iot.ucm4iot.ucm4iot.EnvironmentException;
import mde.iot.ucm4iot.ucm4iot.ExceptionalBlock;
import mde.iot.ucm4iot.ucm4iot.ExceptionalUseCase;
import mde.iot.ucm4iot.ucm4iot.ExtensionBlock;
import mde.iot.ucm4iot.ucm4iot.Extensions;
import mde.iot.ucm4iot.ucm4iot.HandlerUseCase;
import mde.iot.ucm4iot.ucm4iot.HardwareException;
import mde.iot.ucm4iot.ucm4iot.HumanActor;
import mde.iot.ucm4iot.ucm4iot.InteractionStep;
import mde.iot.ucm4iot.ucm4iot.InvocationStep;
import mde.iot.ucm4iot.ucm4iot.IoTUseCaseModel;
import mde.iot.ucm4iot.ucm4iot.Level;
import mde.iot.ucm4iot.ucm4iot.MainScenario;
import mde.iot.ucm4iot.ucm4iot.NetworkException;
import mde.iot.ucm4iot.ucm4iot.Outcome;
import mde.iot.ucm4iot.ucm4iot.OutcomeContinues;
import mde.iot.ucm4iot.ucm4iot.OutcomeEndings;
import mde.iot.ucm4iot.ucm4iot.OutcomeEnds;
import mde.iot.ucm4iot.ucm4iot.PhysicalEntityActor;
import mde.iot.ucm4iot.ucm4iot.PrimaryActor;
import mde.iot.ucm4iot.ucm4iot.SecondaryActor;
import mde.iot.ucm4iot.ucm4iot.SoftwareActor;
import mde.iot.ucm4iot.ucm4iot.SoftwareException;
import mde.iot.ucm4iot.ucm4iot.Step;
import mde.iot.ucm4iot.ucm4iot.Ucm4iotFactory;
import mde.iot.ucm4iot.ucm4iot.Ucm4iotPackage;
import mde.iot.ucm4iot.ucm4iot.UseCase;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Ucm4iotFactoryImpl extends EFactoryImpl implements Ucm4iotFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static Ucm4iotFactory init()
  {
    try
    {
      Ucm4iotFactory theUcm4iotFactory = (Ucm4iotFactory)EPackage.Registry.INSTANCE.getEFactory(Ucm4iotPackage.eNS_URI);
      if (theUcm4iotFactory != null)
      {
        return theUcm4iotFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new Ucm4iotFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ucm4iotFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case Ucm4iotPackage.IO_TUSE_CASE_MODEL: return createIoTUseCaseModel();
      case Ucm4iotPackage.USE_CASE: return createUseCase();
      case Ucm4iotPackage.EXCEPTIONAL_USE_CASE: return createExceptionalUseCase();
      case Ucm4iotPackage.HANDLER_USE_CASE: return createHandlerUseCase();
      case Ucm4iotPackage.MAIN_SCENARIO: return createMainScenario();
      case Ucm4iotPackage.EXTENSIONS: return createExtensions();
      case Ucm4iotPackage.EXTENSION_BLOCK: return createExtensionBlock();
      case Ucm4iotPackage.ALTERNATE_BLOCK: return createAlternateBlock();
      case Ucm4iotPackage.EXCEPTIONAL_BLOCK: return createExceptionalBlock();
      case Ucm4iotPackage.OUTCOME: return createOutcome();
      case Ucm4iotPackage.OUTCOME_ENDS: return createOutcomeEnds();
      case Ucm4iotPackage.OUTCOME_CONTINUES: return createOutcomeContinues();
      case Ucm4iotPackage.STEP: return createStep();
      case Ucm4iotPackage.INTERACTION_STEP: return createInteractionStep();
      case Ucm4iotPackage.INVOCATION_STEP: return createInvocationStep();
      case Ucm4iotPackage.CONDITION_CONTROL_STEP: return createConditionControlStep();
      case Ucm4iotPackage.EXCEPTION: return createException();
      case Ucm4iotPackage.ENVIRONMENT_EXCEPTION: return createEnvironmentException();
      case Ucm4iotPackage.NETWORK_EXCEPTION: return createNetworkException();
      case Ucm4iotPackage.HARDWARE_EXCEPTION: return createHardwareException();
      case Ucm4iotPackage.SOFTWARE_EXCEPTION: return createSoftwareException();
      case Ucm4iotPackage.CONTEXT_EXCEPTION_MAPPING: return createContextExceptionMapping();
      case Ucm4iotPackage.ACTOR: return createActor();
      case Ucm4iotPackage.PRIMARY_ACTOR: return createPrimaryActor();
      case Ucm4iotPackage.SECONDARY_ACTOR: return createSecondaryActor();
      case Ucm4iotPackage.HUMAN_ACTOR: return createHumanActor();
      case Ucm4iotPackage.SOFTWARE_ACTOR: return createSoftwareActor();
      case Ucm4iotPackage.DEVICE_ACTOR: return createDeviceActor();
      case Ucm4iotPackage.PHYSICAL_ENTITY_ACTOR: return createPhysicalEntityActor();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case Ucm4iotPackage.LEVEL:
        return createLevelFromString(eDataType, initialValue);
      case Ucm4iotPackage.OUTCOME_ENDINGS:
        return createOutcomeEndingsFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case Ucm4iotPackage.LEVEL:
        return convertLevelToString(eDataType, instanceValue);
      case Ucm4iotPackage.OUTCOME_ENDINGS:
        return convertOutcomeEndingsToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IoTUseCaseModel createIoTUseCaseModel()
  {
    IoTUseCaseModelImpl ioTUseCaseModel = new IoTUseCaseModelImpl();
    return ioTUseCaseModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UseCase createUseCase()
  {
    UseCaseImpl useCase = new UseCaseImpl();
    return useCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExceptionalUseCase createExceptionalUseCase()
  {
    ExceptionalUseCaseImpl exceptionalUseCase = new ExceptionalUseCaseImpl();
    return exceptionalUseCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HandlerUseCase createHandlerUseCase()
  {
    HandlerUseCaseImpl handlerUseCase = new HandlerUseCaseImpl();
    return handlerUseCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainScenario createMainScenario()
  {
    MainScenarioImpl mainScenario = new MainScenarioImpl();
    return mainScenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Extensions createExtensions()
  {
    ExtensionsImpl extensions = new ExtensionsImpl();
    return extensions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExtensionBlock createExtensionBlock()
  {
    ExtensionBlockImpl extensionBlock = new ExtensionBlockImpl();
    return extensionBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlternateBlock createAlternateBlock()
  {
    AlternateBlockImpl alternateBlock = new AlternateBlockImpl();
    return alternateBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExceptionalBlock createExceptionalBlock()
  {
    ExceptionalBlockImpl exceptionalBlock = new ExceptionalBlockImpl();
    return exceptionalBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Outcome createOutcome()
  {
    OutcomeImpl outcome = new OutcomeImpl();
    return outcome;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutcomeEnds createOutcomeEnds()
  {
    OutcomeEndsImpl outcomeEnds = new OutcomeEndsImpl();
    return outcomeEnds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutcomeContinues createOutcomeContinues()
  {
    OutcomeContinuesImpl outcomeContinues = new OutcomeContinuesImpl();
    return outcomeContinues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Step createStep()
  {
    StepImpl step = new StepImpl();
    return step;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InteractionStep createInteractionStep()
  {
    InteractionStepImpl interactionStep = new InteractionStepImpl();
    return interactionStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvocationStep createInvocationStep()
  {
    InvocationStepImpl invocationStep = new InvocationStepImpl();
    return invocationStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionControlStep createConditionControlStep()
  {
    ConditionControlStepImpl conditionControlStep = new ConditionControlStepImpl();
    return conditionControlStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public mde.iot.ucm4iot.ucm4iot.Exception createException()
  {
    ExceptionImpl exception = new ExceptionImpl();
    return exception;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnvironmentException createEnvironmentException()
  {
    EnvironmentExceptionImpl environmentException = new EnvironmentExceptionImpl();
    return environmentException;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NetworkException createNetworkException()
  {
    NetworkExceptionImpl networkException = new NetworkExceptionImpl();
    return networkException;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HardwareException createHardwareException()
  {
    HardwareExceptionImpl hardwareException = new HardwareExceptionImpl();
    return hardwareException;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoftwareException createSoftwareException()
  {
    SoftwareExceptionImpl softwareException = new SoftwareExceptionImpl();
    return softwareException;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextExceptionMapping createContextExceptionMapping()
  {
    ContextExceptionMappingImpl contextExceptionMapping = new ContextExceptionMappingImpl();
    return contextExceptionMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Actor createActor()
  {
    ActorImpl actor = new ActorImpl();
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryActor createPrimaryActor()
  {
    PrimaryActorImpl primaryActor = new PrimaryActorImpl();
    return primaryActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SecondaryActor createSecondaryActor()
  {
    SecondaryActorImpl secondaryActor = new SecondaryActorImpl();
    return secondaryActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HumanActor createHumanActor()
  {
    HumanActorImpl humanActor = new HumanActorImpl();
    return humanActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoftwareActor createSoftwareActor()
  {
    SoftwareActorImpl softwareActor = new SoftwareActorImpl();
    return softwareActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeviceActor createDeviceActor()
  {
    DeviceActorImpl deviceActor = new DeviceActorImpl();
    return deviceActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalEntityActor createPhysicalEntityActor()
  {
    PhysicalEntityActorImpl physicalEntityActor = new PhysicalEntityActorImpl();
    return physicalEntityActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Level createLevelFromString(EDataType eDataType, String initialValue)
  {
    Level result = Level.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLevelToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutcomeEndings createOutcomeEndingsFromString(EDataType eDataType, String initialValue)
  {
    OutcomeEndings result = OutcomeEndings.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOutcomeEndingsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ucm4iotPackage getUcm4iotPackage()
  {
    return (Ucm4iotPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static Ucm4iotPackage getPackage()
  {
    return Ucm4iotPackage.eINSTANCE;
  }

} //Ucm4iotFactoryImpl
