/**
 * generated by Xtext 2.25.0
 */
package mde.iot.ucm4iot.ucm4iot.impl;

import java.util.Collection;

import mde.iot.ucm4iot.ucm4iot.IoTUseCaseModel;
import mde.iot.ucm4iot.ucm4iot.Ucm4iotPackage;
import mde.iot.ucm4iot.ucm4iot.UseCase;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Io TUse Case Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.IoTUseCaseModelImpl#isStandardMode <em>Standard Mode</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.IoTUseCaseModelImpl#getUseCases <em>Use Cases</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IoTUseCaseModelImpl extends MinimalEObjectImpl.Container implements IoTUseCaseModel
{
  /**
   * The default value of the '{@link #isStandardMode() <em>Standard Mode</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStandardMode()
   * @generated
   * @ordered
   */
  protected static final boolean STANDARD_MODE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStandardMode() <em>Standard Mode</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStandardMode()
   * @generated
   * @ordered
   */
  protected boolean standardMode = STANDARD_MODE_EDEFAULT;

  /**
   * The cached value of the '{@link #getUseCases() <em>Use Cases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUseCases()
   * @generated
   * @ordered
   */
  protected EList<UseCase> useCases;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IoTUseCaseModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Ucm4iotPackage.Literals.IO_TUSE_CASE_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isStandardMode()
  {
    return standardMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStandardMode(boolean newStandardMode)
  {
    boolean oldStandardMode = standardMode;
    standardMode = newStandardMode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.IO_TUSE_CASE_MODEL__STANDARD_MODE, oldStandardMode, standardMode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UseCase> getUseCases()
  {
    if (useCases == null)
    {
      useCases = new EObjectContainmentEList<UseCase>(UseCase.class, this, Ucm4iotPackage.IO_TUSE_CASE_MODEL__USE_CASES);
    }
    return useCases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.IO_TUSE_CASE_MODEL__USE_CASES:
        return ((InternalEList<?>)getUseCases()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.IO_TUSE_CASE_MODEL__STANDARD_MODE:
        return isStandardMode();
      case Ucm4iotPackage.IO_TUSE_CASE_MODEL__USE_CASES:
        return getUseCases();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.IO_TUSE_CASE_MODEL__STANDARD_MODE:
        setStandardMode((Boolean)newValue);
        return;
      case Ucm4iotPackage.IO_TUSE_CASE_MODEL__USE_CASES:
        getUseCases().clear();
        getUseCases().addAll((Collection<? extends UseCase>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.IO_TUSE_CASE_MODEL__STANDARD_MODE:
        setStandardMode(STANDARD_MODE_EDEFAULT);
        return;
      case Ucm4iotPackage.IO_TUSE_CASE_MODEL__USE_CASES:
        getUseCases().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.IO_TUSE_CASE_MODEL__STANDARD_MODE:
        return standardMode != STANDARD_MODE_EDEFAULT;
      case Ucm4iotPackage.IO_TUSE_CASE_MODEL__USE_CASES:
        return useCases != null && !useCases.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (standardMode: ");
    result.append(standardMode);
    result.append(')');
    return result.toString();
  }

} //IoTUseCaseModelImpl
