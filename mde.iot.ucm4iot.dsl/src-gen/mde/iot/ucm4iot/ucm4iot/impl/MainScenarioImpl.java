/**
 * generated by Xtext 2.25.0
 */
package mde.iot.ucm4iot.ucm4iot.impl;

import java.util.Collection;

import mde.iot.ucm4iot.ucm4iot.MainScenario;
import mde.iot.ucm4iot.ucm4iot.OutcomeEnds;
import mde.iot.ucm4iot.ucm4iot.Step;
import mde.iot.ucm4iot.ucm4iot.Ucm4iotPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Main Scenario</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.MainScenarioImpl#getSteps <em>Steps</em>}</li>
 *   <li>{@link mde.iot.ucm4iot.ucm4iot.impl.MainScenarioImpl#getOutcome <em>Outcome</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MainScenarioImpl extends MinimalEObjectImpl.Container implements MainScenario
{
  /**
   * The cached value of the '{@link #getSteps() <em>Steps</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSteps()
   * @generated
   * @ordered
   */
  protected EList<Step> steps;

  /**
   * The cached value of the '{@link #getOutcome() <em>Outcome</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutcome()
   * @generated
   * @ordered
   */
  protected OutcomeEnds outcome;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MainScenarioImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Ucm4iotPackage.Literals.MAIN_SCENARIO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Step> getSteps()
  {
    if (steps == null)
    {
      steps = new EObjectContainmentEList<Step>(Step.class, this, Ucm4iotPackage.MAIN_SCENARIO__STEPS);
    }
    return steps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutcomeEnds getOutcome()
  {
    return outcome;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOutcome(OutcomeEnds newOutcome, NotificationChain msgs)
  {
    OutcomeEnds oldOutcome = outcome;
    outcome = newOutcome;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.MAIN_SCENARIO__OUTCOME, oldOutcome, newOutcome);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutcome(OutcomeEnds newOutcome)
  {
    if (newOutcome != outcome)
    {
      NotificationChain msgs = null;
      if (outcome != null)
        msgs = ((InternalEObject)outcome).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ucm4iotPackage.MAIN_SCENARIO__OUTCOME, null, msgs);
      if (newOutcome != null)
        msgs = ((InternalEObject)newOutcome).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ucm4iotPackage.MAIN_SCENARIO__OUTCOME, null, msgs);
      msgs = basicSetOutcome(newOutcome, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ucm4iotPackage.MAIN_SCENARIO__OUTCOME, newOutcome, newOutcome));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.MAIN_SCENARIO__STEPS:
        return ((InternalEList<?>)getSteps()).basicRemove(otherEnd, msgs);
      case Ucm4iotPackage.MAIN_SCENARIO__OUTCOME:
        return basicSetOutcome(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.MAIN_SCENARIO__STEPS:
        return getSteps();
      case Ucm4iotPackage.MAIN_SCENARIO__OUTCOME:
        return getOutcome();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.MAIN_SCENARIO__STEPS:
        getSteps().clear();
        getSteps().addAll((Collection<? extends Step>)newValue);
        return;
      case Ucm4iotPackage.MAIN_SCENARIO__OUTCOME:
        setOutcome((OutcomeEnds)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.MAIN_SCENARIO__STEPS:
        getSteps().clear();
        return;
      case Ucm4iotPackage.MAIN_SCENARIO__OUTCOME:
        setOutcome((OutcomeEnds)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Ucm4iotPackage.MAIN_SCENARIO__STEPS:
        return steps != null && !steps.isEmpty();
      case Ucm4iotPackage.MAIN_SCENARIO__OUTCOME:
        return outcome != null;
    }
    return super.eIsSet(featureID);
  }

} //MainScenarioImpl
