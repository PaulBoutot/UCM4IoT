/*
 * generated by Xtext 2.25.0
 */
package mde.iot.ucm4iot.scoping;

import java.util.*;
import java.util.stream.*;
import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import mde.iot.ucm4iot.Ucm4iotQualifiedNameProvider;
import mde.iot.ucm4iot.Ucm4iotUtilities;
import mde.iot.ucm4iot.ucm4iot.*;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class Ucm4iotScopeProvider extends AbstractUcm4iotScopeProvider {
	/*
	 * getScope(..)
	 * ------------
	 * Gets the scope of a referenced object.
	 */
	@Override
	public IScope getScope(EObject ctx, EReference ref) {
		if (ref == Ucm4iotPackage.Literals.CONTEXT_EXCEPTION_MAPPING__EXCEPTION) {
			return getContextExceptionMapping_ExceptionScope(ctx);
		} else if (ref == Ucm4iotPackage.Literals.OUTCOME_CONTINUES__STEP) {
			return getOutcomeContinues_StepScope(ctx, ref);
		} else if (ref == Ucm4iotPackage.Literals.EXTENSION_BLOCK__REF_STEP) {
			return getExtensionBlock_RefStepScope(ctx, ref);
		} else if (ref == Ucm4iotPackage.Literals.EXTENSION_BLOCK__END_REF_STEP) {
			return getExtensionBlock_EndRefStepScope(ctx, ref);
		}
		
		return super.getScope(ctx, ref);
	}
	
	/**
	 * getExceptionScope(..)
	 * ---------------------
	 * Gets the scope for referenced exceptions.
	 * @param ctx the element from which an element shall be referenced.
	 * @return
	 */
	private IScope getContextExceptionMapping_ExceptionScope(EObject ctx) {
		if (ctx == null || !(ctx instanceof ContextExceptionMapping)) {
			return IScope.NULLSCOPE;
		}
		
		// Get the context of the referenced exception.
		ContextExceptionMapping mapping = (ContextExceptionMapping)ctx;
		
		// Declare variable(s) to keep track of relevant exceptions.
		List<mde.iot.ucm4iot.ucm4iot.Exception> exceptions = new ArrayList<>();
		
		// Finds all declared exceptions.
		IoTUseCaseModel root = EcoreUtil2.getContainerOfType(ctx, IoTUseCaseModel.class);
		List<UseCase> candidates = root.getUseCases().stream()
				.filter(useCase -> useCase.equals(mapping.getContext()))
				.collect(Collectors.toList());

		// There should only be one candidate. This loop is a failsafe.
		for (UseCase candidate : candidates) {
			List<mde.iot.ucm4iot.ucm4iot.Exception> relevantExceptions = EcoreUtil2.getAllContentsOfType(candidate, InteractionStep.class).stream()
					.filter(step -> step.getException() != null)
					.map(step -> step.getException())
					.collect(Collectors.toList());
			
			exceptions.addAll(relevantExceptions);
		}

		return Scopes.scopeFor(exceptions);
	}
	
	/**
	 * getOutcomeContinuesStepScope(..)
	 * --------------------------------
	 * Gets the scope for referenced steps.
	 * @param ctx
	 * @param ref
	 * @return
	 */
	private IScope getOutcomeContinues_StepScope(EObject ctx, EReference ref) {
		if (ctx == null) {
			return IScope.NULLSCOPE;
		}
		
		// Finds all declared steps.
		UseCase root = EcoreUtil2.getContainerOfType(ctx, UseCase.class);
		List<Step> steps = EcoreUtil2.getAllContentsOfType(root, Step.class).stream()
				.filter(step -> Ucm4iotUtilities.hasStepNumber(step))
				.collect(Collectors.toList());
		
		Ucm4iotQualifiedNameProvider uQNP = new Ucm4iotQualifiedNameProvider();
		return Scopes.scopeFor(steps, step -> uQNP.qualifiedName((Step)step), IScope.NULLSCOPE);
	}
	
	/**
	 * getExtensionBlock_RefStepScope(..)
	 * @param ctx
	 * @param ref
	 * @return
	 */
	private IScope getExtensionBlock_RefStepScope(EObject ctx, EReference ref) {
		if (ctx == null) {
			return IScope.NULLSCOPE;
		}
		
		// Finds all relevant declared steps.
		EObject parent = ctx.eContainer();
		List<Step> steps = null;
		
		// If the parent container is an extension block, then consider the steps in the outer block.
		if (parent instanceof ExtensionBlock) {
			steps = ((ExtensionBlock)parent).getSteps().stream()
					.filter(step -> Ucm4iotUtilities.hasStepNumber(step))
					.collect(Collectors.toList());
		} else {
			UseCase root = EcoreUtil2.getContainerOfType(ctx, UseCase.class);
			
			// Only look at the steps in the main scenario.
			steps = EcoreUtil2.getAllContentsOfType(root, Step.class).stream()
					.filter(step -> Ucm4iotUtilities.hasStepNumber(step))
					.collect(Collectors.toList());
		}
		
		Ucm4iotQualifiedNameProvider uQNP = new Ucm4iotQualifiedNameProvider();
		return Scopes.scopeFor(steps, step -> uQNP.qualifiedName((Step)step), IScope.NULLSCOPE);
	}
	
	private IScope getExtensionBlock_EndRefStepScope(EObject ctx, EReference ref) {
		return getExtensionBlock_RefStepScope(ctx, ref);
	}
}
